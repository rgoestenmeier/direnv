#!/usr/local/bin/bash
#vim: tabstop=4:

#------------------------------------------------------------------------------------------
	THIS="$0"
	[[ -h "$THIS" ]] && THIS="$(readlink "$THIS")"

	HERE="$(cd $(dirname "$THIS"); pwd)"
	SELF="$(basename "$0")"

	DIRENV_ROOT="$(cd "$HERE"/..; pwd)"
	DIRENV_TEMPLATES=$DIRENV_ROOT/etc/templates
	DIRENV_BASE=$PWD/.env

	_DEPLOY_VERSION=1.2.7

#------------------------------------------------------------------------------------------
DEBUG() {
	local _LEVEL=$1;	shift;
	local _LINE="$*";	shift;
	
	printf "DBG: %s\n" "$_LINE"
}

#------------------------------------------------------------------------------------------
DO_INFO() {
	echo "SELF             = $SELF"
	echo "VERSION          = $_DEPLOY_VERSION"
	echo "THIS             = $THIS"
	echo "HERE             = $HERE"
	echo "DIRENV_ROOT      = $DIRENV_ROOT"
	echo "DIRENV_TEMPLATES = $DIRENV_TEMPLATES"
	echo "DIRENV_BASE      = $DIRENV_BASE"
	echo "DIRENV_HOME      = $DIRENV_HOME"

	exit
}

#------------------------------------------------------------------------------------------
DO_HELP() {
	echo "$*"
	echo " "

	echo "$SELF:"

	echo $L_OPTS | tr ',' '\n' | while read _LINE
	do
		_OPT="${_LINE##:*}"
		_PAR="${_LINE%%*:}"

		if [[ ! -n $_PAR ]]; then
			_PAR="<parameter>"
		else
			_PAR=""
		fi

		printf "%10s %-20s %s\n" " " "$_OPT" "$_PAR"
	done

	exit
}

#------------------------------------------------------------------------------------------
DO_VERSION() {
	echo "$SELF: Version $_DEPLOY_VERSION"
	exit 0
}

#------------------------------------------------------------------------------------------
STEP=0
LOG() {
	local _LINE="$1"; shift
	local _MODE="${1:-RUN}"

	[[ $_MODE == INIT ]] && STEP=0

	(( STEP=$STEP + 1 ))

	printf "%3d: %s\n" "$STEP" "$_LINE"
}

#------------------------------------------------------------------------------------------
DO_GET_VERSIONS() {
	local _VERSION="$1"

	if [[ "$_VERSION" == "LTS" ]]; then
		curl -s http://nodejs.org/dist/index.tab | grep -v '^version' | sed '1,$s/^v//' |  awk '$10 != "-" { print $1 }'|head -1
	else
		if [[ "$_VERSION" == "LATEST" ]]; then
			_FILTER="sed -n 2p"
		else
			_FILTER="sed -n 2,10p"
		fi
	
		curl -s http://nodejs.org/dist/index.tab | sed '1,$s/^v//' |  awk '{ print $1 }' | $_FILTER
	fi
}

#------------------------------------------------------------------------------------------
DO_SELF_UPDATE() {
	if [[ -d "$DIRENV_ROOT/.git" ]]; then
		cd "$DIRENV_ROOT"
		git pull
		exit
	fi
}

#------------------------------------------------------------------------------------------
DO_CHECK_INSTALL() {
	if [[ ! -n "$DIRENV_HOME" ]]; then
		printf "ERROR: direnv not setup correct. Missing DIRENV_BASE\n"
		exit
	fi
}

#------------------------------------------------------------------------------------------
DO_INSTALL_DEFAULTS() {
	local _VERSION=$1; shift

	DO_CHECK_INSTALL

	local _FOLDER=$DIRENV_BASE/node/$_VERSION
	local _CONFIG=.envrc.config

	PATH=$_FOLDER/bin:$PATH

	if [[ !  -f $_CONFIG ]]; then
		LOG "No defaults file: $_CONFIG"
		exit
	fi

	cat $_CONFIG | cut -d= -f2 | while read _LINE
	do
		LOG "npm -g install $_LINE"
		npm -g install $_LINE
	done
}

#------------------------------------------------------------------------------------------
DO_INSTALL_PYTHON() {
	local _FOLDER=$DIRENV_HOME

	DO_CHECK_INSTALL

	LOG "Create venv in $_FOLDER/python"
	python3 -m venv $_FOLDER/python

	LOG "Activate venv"
	. $_FOLDER/python/bin/activate

	LOG "Upgrade pip"
	pip install --upgrade pip
}

#------------------------------------------------------------------------------------------
DO_INSTALL_NODE() {
	local _VERSION=$1
	local _LINK=http://nodejs.org/dist/${_VERSION}/node-${_VERSION}-darwin-x64.tar.gz

	DO_CHECK_INSTALL

	local _FOLDER=$DIRENV_HOME/node/$_VERSION
	local _TARFILE=$(basename "$_LINK")
	local _TARFLDR=$DIRENV_ROOT/cache
	local _TARPATH=$_TARFLDR/$_TARFILE

	DO_CHECK_INSTALL

	if [[ -f "$_TARPATH" ]]; then
		LOG "Use cached NodeJS archiv for version $_VERSION"
	else
		LOG "Download NodeJS archiv for version $_VERSION"
		mkdir -p "$_TARFLDR"
		curl -fsSL "$_LINK" -o "$_TARPATH"
	fi

	LOG "Create $_FOLDER"
	rm -rf   "$_FOLDER"
	mkdir -p "$_FOLDER"

	LOG "Unpack NodeJS archiv"
	cat "$_TARPATH" | tar xz --strip 1 -C "$_FOLDER"

	LOG "Add PATH $_FOLDER/bin"
	PATH=$_FOLDER/bin:$PATH

	LOG "Update NPM: $_FOLDER/bin/npm"
	$_FOLDER/bin/npm --silent -g install npm

	if [[ $OPT_WITH_DEFAULTS = "YES" ]]; then
		LOG "Install defaults"
		DO_INSTALL_DEFAULTS $_VERSION
	fi
}

#------------------------------------------------------------------------------------------
DO_INSTALL_YARN() {
	local _VERSION=$1
	local _FOLDER=$DIRENV_HOME/yarn

	DO_CHECK_INSTALL

	LOG "Install yarn"
	npm --silent -g install yarn

	LOG "Set Yarn Cache folder to $_FOLDER"
	yarn --silent config set global-folder $_FOLDER
}

#------------------------------------------------------------------------------------------
DO_INSTALL_ANGULAR() {
	local _VERSION=$1
	local _FOLDER=$DIRENV_HOME/yarn

	DO_CHECK_INSTALL

	LOG "Install Angular CLI with yarn"
	yarn --silent global add @angular/cli
	rm /usr/local/bin/ng

	PATH=$_FOLDER/node_modules/.bin:$PATH

	LOG "Using ng from $(which ng)"
	ng config -g cli.packageManager yarn
}

#------------------------------------------------------------------------------------------
DO_INSTALL_IONIC() {
	local _VERSION=$1
	local _FOLDER=$DIRENV_HOME/yarn

	DO_CHECK_INSTALL

	LOG "Install yarn"
	yarn --silent add  ionic

	[[ -f /usr/local/bin/ionic ]] && rm /usr/local/bin/ionic
}

DO_INSTALL_PROD_IONIC() {
	local _VERSION=$1

	DO_CHECK_INSTALL

	DO_INSTALL_PYTHON	$_VERSION
	DO_INSTALL_NODE		$_VERSION
	DO_INSTALL_YARN		$_VERSION
	DO_INSTALL_IONIC	$_VERSION

	DO_INSTALL_DEFAULTS
}

DO_INSTALL_PROD_ANGULAR() {
	local _VERSION=$1

	DO_CHECK_INSTALL

	DO_INSTALL_PYTHON	$_VERSION
	DO_INSTALL_NODE		$_VERSION
	DO_INSTALL_YARN		$_VERSION
	DO_INSTALL_ANGULAR 	$_VERSION

	DO_INSTALL_DEFAULTS
}

DO_INIT() {
	local _TYPE="$1"

	local _EXT
	if [[ -n "$_TYPE"  ]]; then
		_EXT="${_TYPE}"
	else
		_EXT="master"
	fi

	LOG "Create ${_EXT}.envrc"
	cp $DIRENV_TEMPLATES/${_EXT}.envrc  .envrc

	LOG "Create ${_EXT}.config"
	cp $DIRENV_TEMPLATES/${_EXT}.config .envrc.config

	if [[ ! -f ".envrc.ssh-user" ]]; then
		LOG "Create ${_EXT}.ssh-user"
		echo "r14r" >.envrc.ssh-user
	fi
}

#------------------------------------------------------------------------------------------
	VERBOSE=false
	DEBUG=false

	OPT_YSN_VERSION=NO
	OPT_YSN_INFO=NO
	OPT_YSN_HELP=NO

	OPT_VERSION_USE_LATEST=NO

	OPT_VERSION=MISSING
	OPT_WITH_DEFAULTS=NO

#------------------------------------------------------------------------------------------
	CMD_GETOPT=/usr/local/opt/gnu-getopt/bin/getopt

	S_OPTS="vdm:"
	L_OPTS="verbose,debug,help,version, info"
	L_OPTS="$L_OPTS,list,update,install:,install-version:,install-defaults,with-defaults,init:"

	OPTS=$($CMD_GETOPT --options "$S_OPTS"--longoptions "$L_OPTS"	-- "$@")

	eval set $OPTS
	shift

	while [[ $# -gt 0 ]]; do
		case "$1" in
			-v | --verbose)		VERBOSE=true;										;;
			-d | --debug)		DEBUGLEVEL="$2";					shift			;;

			--help)				OPT_YSN_HELP=YES									;;
			--version)			OPT_YSN_VERSION=YES									;;
			--info)				OPT_YSN_INFO=YES									;;

			--update)			OPT_MODE=update										;;

			--list)				OPT_MODE=list										;;
			--init)				OPT_MODE=init;		OPT_TYPE="$2";		shift		;;
			--install)			OPT_MODE=install;	OPT_TYPE="$2";		shift		;;
	
			--install-version)						OPT_VERSION="$2";	shift		;;
			--with-defaults)	OPT_WITH_DEFAULTS=YES								;;
	
			--install-defaults)	OPT_MODE=install_defaults							;;

			--)														shift; break	;;
			* )														       break	;;
		esac
	
		shift
	done

#------------------------------------------------------------------------------------------
	[[ "$OPT_VERSION" = "" ]] && OPT_VERSION=MISSING
	OPT_VERSION=${OPT_VERSION^^}

#------------------------------------------------------------------------------------------
	if [[ $OPT_MODE == install ]]; then
		OPT_MODE=$OPT_MODE/$OPT_TYPE
	fi

	[[ $OPT_YSN_HELP    == YES ]] && DO_HELP
	[[ $OPT_YSN_VERSION == YES ]] && DO_VERSION
	[[ $OPT_YSN_INFO    == YES ]] && DO_INFO


	if [[ $OPT_TYPE == node ]]; then
		if   [[ "$OPT_VERSION" == "MISSING" && "$OPT_YSN_VERSION" == YES ]]; then
			DO_HELP "Missing Version. Use Parameter --install-version instead of --version"
		fi
	fi

	if   [[ "$OPT_VERSION" == "MISSING" ]]; then OPT_VERSION=v$(DO_GET_VERSIONS LTS)
	elif [[ "$OPT_VERSION" == "LATEST"  ]]; then OPT_VERSION=v$(DO_GET_VERSIONS LATEST)
	elif [[ "$OPT_VERSION" == "LTS"     ]]; then OPT_VERSION=v$(DO_GET_VERSIONS LTS)
	elif [[ "$OPT_VERSION{0:1}" != "v"  ]]; then OPT_VERSION=v$OPT_VERSION
	fi

	#echo "VERSION         = $_DEPLOY_VERSION"
	#echo "OPT_YSN_HELP    = $OPT_YSN_HELP"
	#echo "OPT_YSN_VERSION = $OPT_YSN_VERSION"
	#echo "OPT_MODE        = $OPT_MODE"
	#echo "OPT_TYPE        = $OPT_TYPE"
	#echo "OPT_VERSION     = $OPT_VERSION"

	case $OPT_MODE in
		init)				DO_INIT			$OPT_TYPE				;;
		update)				DO_SELF_UPDATE							;;

		version)			DO_VERSION								;;
		help)				DO_HELP									;;

		install/node)		DO_INSTALL_NODE		$OPT_VERSION		;;
		install/nodejs)		DO_INSTALL_NODE		$OPT_VERSION		;;
		install/yarn)		DO_INSTALL_YARN		$OPT_VERSION		;;

		install/angular)	DO_INSTALL_PROD_ANGULAR	$OPT_VERSION	;;
		install/ionic)		DO_INSTALL_PROD_IONIC	$OPT_VERSION		;;

		install/python)		DO_INSTALL_PYTHON						;;
		install_defaults)	DO_INSTALL_DEFAULTS	$OPT_VERSION		;;

		list)				DO_GET_VERSIONS							;;
	esac

