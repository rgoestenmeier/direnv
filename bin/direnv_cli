#!/usr/local/bin/bash
#vim: tabstop=4:
	set -u

#------------------------------------------------------------------------------------------
	_DEPLOY_VERSION=2.0.0-01

#------------------------------------------------------------------------------------------
	THIS="$0"
	HERE="$PWD"

	[[ -h "$THIS" ]] && THIS="$(readlink "$THIS")"

	SELF="$(basename "$0")"

	DIRENV_ROOT="$(cd $(dirname "$THIS")/..; pwd)"
	#DIRENV_ROOT="$(cd "$HERE"/..; pwd)"
	DIRENV_TEMPLATES=$DIRENV_ROOT/etc/templates
	DIRENV_HOME="$(direnv status | grep 'Loaded RC path' | cut -d' ' -f4- | xargs -I{} dirname {})"

	if [[ "$DIRENV_HOME" == "" ]]; then
		DIRENV_HOME="$PWD"
	fi

	#
	DIRENV_HOME="$DIRENV_HOME/.env"
	DIRENV_BASE="$(cd $DIRENV_HOME/..; pwd)"

	#
	DIRENV_FILE_CONFIG="$DIRENV_HOME/.envrc.config"
	DIRENV_FILE_ENVRC="$DIRENV_BASE/.envrc"
	DIRENV_FILE_SSHENV="$DIRENV_HOME/.ssh-environment"
	DIRENV_FILE_SSHUSR="$DIRENV_HOME/.ssh-user"

	#
	DIRENV_USER="$(basename "$PWD")"
	DIRENV_USER_SSH="$(cat $DIRENV_FILE_SSHUSR 2>&-)"


	SCRIPT_CURRENT="$(which $SELF)"
	SCRIPT_MASTER="$DIRENV_ROOT/bin/direnv_cli"

#------------------------------------------------------------------------------------------
	YARN_ROOT=/Users/Shared/CLOUD/Development.Yarn

#------------------------------------------------------------------------------------------
DEBUGLEVEL=0
debug() {
	local _LEVEL=$1;	shift;
	local _LINE="$*";	shift;

	if [[ "$_LEVEL" -le "$DEBUGLEVEL" ]]; then
		printf "DBG: %s\n" "$_LINE"
	fi
}

#------------------------------------------------------------------------------------------
status()
{
        _P1="${1:-}";		shift
        _P2="${1:-}";		shift
        _P3="${1:-}";		shift
        _P4="${1:-}";		shift
        _P5="${1:-WITHGROUP}";	shift


	if [[ "$_P5" == "WITHGROUP" ]]; then
		printf "%-10s: %-10s %-20s  %s\n" "$_P1" "$_P2" "$_P3" "$_P4"
	else
		printf "%-10s: %-10s %-20s  %s\n" ""     "$_P2" "$_P3" "$_P4"
	fi
}

#------------------------------------------------------------------------------------------
info() {
	status "Info"	""
	status ""	""	"SELF"			"$(relpath "$SELF")"			NOGROUP
	status ""	""	"VERSION"		"$(relpath "$_DEPLOY_VERSION")"		NOGROUP
	status "" 	""	"<HOME>"		"$HOME"					NOGROUP
	status "" 	""	"<DIRENV>"		"$DIRENV_HOME"				NOGROUP
	status ""	""	"THIS"  		"$(relpath "$THIS")"			NOGROUP
	status ""	""	"HERE"  		"$(relpath "$HERE")"			NOGROUP
	status ""	""	"DIRENV_ROOT"		"$(relpath "$DIRENV_ROOT")"		NOGROUP
	status ""	""	"DIRENV_TEMPLATES"	"$(relpath "$DIRENV_TEMPLATES")"	NOGROUP
	status ""	""	"DIRENV_BASE"  		"$(relpath "$DIRENV_BASE")"		NOGROUP
	status ""	""	"DIRENV_HOME"  		"$(relpath "$DIRENV_HOME")"		NOGROUP


	exit
}

#------------------------------------------------------------------------------------------
help() {
	echo "$*"
	echo " "

	echo "$SELF:"

	echo $L_OPTS | tr ',' '\n' | while read _LINE
	do
		_OPT="${_LINE##:*}"
		_PAR="${_LINE%%*:}"

		if [[ ! -n $_PAR ]]; then
			_PAR="<parameter>"
		else
			_PAR=""
		fi

		printf "%10s %-20s %s\n" " " "$_OPT" "$_PAR"
	done

	exit
}

#------------------------------------------------------------------------------------------
version() {
	echo "$SELF: Version CLI    $_DEPLOY_VERSION"
	echo "$SELF: Version Config $DIRENV_FILE_CONFIG"
	exit 0
}

#------------------------------------------------------------------------------------------
error() {
	echo "ERROR: $*"
	exit 0
}


relpath()
{
	local _RELPATH; _RELPATH="${1:-}"

	_RELPATH="$(echo "$_RELPATH" | sed "1,\$s#$DIRENV_HOME/#<DIRENV>/#")"
	_RELPATH="$(echo "$_RELPATH" | sed "1,\$s#$DIRENV_HOME\$#<DIRENV>#")"
	_RELPATH="$(echo "$_RELPATH" | sed "1,\$s#$HOME/#<HOME>/#")"

	echo "$_RELPATH"
}

#echo "$HOME/xyz:	$(relpath $HOME/yxz)"
#echo "$DIRENV_ROOT:	$(relpath $DIRENV_ROOT)"
#echo "$DIRENV_HOME:	$(relpath $DIRENV_HOME)"
#echo "$DIRENV_FILE_ENVRC:		$(relpath $DIRENV_FILE_ENVRC)"
#echo "$(relpath $DIRENV_FILE_SSHENV)"
#echo "$(relpath $DIRENV_FILE_SSHUSR)"

#------------------------------------------------------------------------------------------
STEP=0
LOG() {
	local _LINE="$1"; shift
	local _MODE="${1:-RUN}"

	[[ $_MODE == INIT ]] && STEP=0

	(( STEP=$STEP + 1 ))

	if [[ "$_MODE" == "NONUMBER" ]]; then
		printf "%3s  %s\n" "" "$_LINE"

	else
		printf "%3d: %s\n" "$STEP" "$_LINE"
	fi
}

#-------------------------------------------------------------------------------
envrc_save()
{
	local _FILE="$DIRENV_FILE_ENVRC"
	local _VERSION="$(grep -E '^\s+_DEPLOY_VERSION='  $_FILE | cut -d= -f2)"

	#
	_DIRENV_FILE_ENVRC=".envrc"
	_MASTER_FILE_ENVRC="$DIRENV_TEMPLATES/master.envrc"

	LOG "Copy '$_DIRENV_FILE_ENVRC' to '$_MASTER_FILE_ENVRC'"

	_YSN_SAVE=NO


	if   [[ ! -f "$_MASTER_FILE_ENVRC" ]]; then _YSN_SAVE=YES
	elif [[ "$OPT_FORCE" == "YES"      ]]; then _YSN_SAVE=YES
	else                                        LOG "Already exists: ${_MASTER_FILE_ENVRC}." NONUMBER
	                                            LOG "Use --force to overide" 		 NONUMBER
	fi

	if [[ "$_YSN_SAVE" == "YES" ]]; then
		cp $_FILE $_MASTER_FILE_ENVRC
		cp $_FILE $_MASTER_FILE_ENVRC.${_VERSION}
		LOG "Done: $_FILE $_MASTER_FILE_ENVRC.${_VERSION}"
	fi
}

#-------------------------------------------------------------------------------
envrc_edit()
{
	local _FILE="$DIRENV_FILE_ENVRC"
	local _VERSION="$(grep -E '^.+_DEPLOY_VERSION'  $_FILE | cut -d= -f2)"

	LOG "Edit $_FILE (Version $_VERSION)"

	if [[ -f "$_FILE" ]]; then
		vi "$_FILE"
	else
		error "$_FILE does not exist." NONUMBER
	fi
}

#-------------------------------------------------------------------------------
config_load()
{
        [[ -f "$DIRENV_FILE_CONFIG" ]] && eval $(grep -E '^use_' $DIRENV_FILE_CONFIG | tr "[:lower:]" "[:upper:]")

        export USE_IONIC="${USE_IONIC:-MISSING}"
        export USE_ANGULAR="${USE_ANGULAR:-MISSING}"
        export USE_NODE="${USE_NODE:-MISSING}"
        export USE_FLUTTER="${USE_FLUTTER:-MISSING}"
        export USE_DOTNET="${USE_DOTNET:-MISSING}"
        export USE_PYTHON="${USE_PYTHON:-MISSING}"
        export USE_FASTLANE="${USE_FASTLANE:-MISSING}"
        export USE_YARN="${USE_YARN:-MISSING}"
}

#-------------------------------------------------------------------------------
config_edit()
{
        if [[ -f  "$DIRENV_FILE_CONFIG" ]]; then
		vi $DIRENV_FILE_CONFIG
	else
		echo "ERROR: no config file present (install default with --install-config)"
	fi
}

#-------------------------------------------------------------------------------
config_install()
{
	local _EXT
	_EXT="master"

	LOG "Create ${_EXT}.config"

	_YSN_INSTALL=NO

	if   [[ ! -f "$DIRENV_FILE_CONFIG" ]]; then _YSN_INSTALL=YES
	elif [[ "$OPT_FORCE" == "YES"     ]]; then _YSN_INSTALL=YES
	else                                  LOG "$DIRENV_FILE_CONFIG already exists. User --force to overide" NONUMBER
	fi

	if [[ "$_YSN_INSTALL" == "YES" ]]; then
		cp $DIRENV_TEMPLATES/${_EXT}.config $DIRENV_FILE_CONFIG
		LOG "Installed: $DIRENV_TEMPLATES/${_EXT}.config"

		config_show
	fi
}
#-------------------------------------------------------------------------------
config_save()
{
	local _EXT="master"
	local _FILE="$DIRENV_FILE_CONFIG"
	local _VERSION="$(grep -E '^.+_DEPLOY_VERSION'  $_FILE | cut -d= -f2)"

	LOG "Copy $_FILE (Version $_VERSION) to ${_EXT}.config"

	_YSN_SAVE=NO


	if   [[ ! -f "$_FILE"          ]]; then _YSN_SAVE=YES
	elif [[ "$OPT_FORCE" == "YES"  ]]; then _YSN_SAVE=YES
	else                               LOG "$DIRENV_FILE_CONFIG already exists. User --force to overide" NONUMBER
	fi

	if [[ "$_YSN_SAVE" == "YES" ]]; then
		cp $_FILE $DIRENV_TEMPLATES/${_EXT}.config
		cp $_FILE $DIRENV_TEMPLATES/${_EXT}.config.${_VERSION}
		LOG "Done: $DIRENV_TEMPLATES/${_EXT}.config"
	fi
}

#-------------------------------------------------------------------------------
config_show()
{
	config_load

        LOG "Show configuration file"
        LOG "use_ionic    = ${USE_IONIC,,}"		NONUMBER
        LOG "use_angular  = ${USE_ANGULAR,,}"		NONUMBER
        LOG "use_node     = ${USE_NODE,,}"		NONUMBER
        LOG "use_flutter  = ${USE_FLUTTER,,}"		NONUMBER
        LOG "use_dotnet   = ${USE_DOTNET,,}"		NONUMBER
        LOG "use_python   = ${USE_PYTHON,,}"		NONUMBER
        LOG "use_fastlane = ${USE_FASTLANE,,}"		NONUMBER
        LOG "use_yarn     = ${USE_YARN,,}"		NONUMBER
}

#------------------------------------------------------------------------------------------
version_get() {
	local _VERSION="$1"

	if [[ "$_VERSION" == "LTS" ]]; then
		curl -s http://nodejs.org/dist/index.tab | grep -v '^version' | sed '1,$s/^v//' |  awk '$10 != "-" { print $1 }'|head -1
	else
		if [[ "$_VERSION" == "LATEST" ]]; then
			_FILTER="sed -n 2p"
		else
			_FILTER="sed -n 2,10p"
		fi
	
		curl -s http://nodejs.org/dist/index.tab | sed '1,$s/^v//' |  awk '{ print $1 }' | $_FILTER
	fi
}

#------------------------------------------------------------------------------------------
do_show_versions() {
		_FILTER="sed -n 2,10p"
		curl -s http://nodejs.org/dist/index.tab | sed '1,$s/^v//' |  awk '{ print $1 }' | $_FILTER
}

#------------------------------------------------------------------------------------------
do_self_update() {
	if [[ -d "$DIRENV_ROOT/.git" ]]; then
		cd "$DIRENV_ROOT"
		git pull
		exit
	fi
}

do_self_check_version() {
	local _TYPE="$1";	shift
	local _FILE1="$1";	shift
	local _FILE2="$1";	shift

	local _VERSION1="$(grep -E '^\s+_DEPLOY_VERSION'  $_FILE1 | cut -d= -f2)"
	local _VERSION2="$(grep -E '^\s+_DEPLOY_VERSION'  $_FILE2 | cut -d= -f2)"

	if [[ "$_VERSION1"  == "$_VERSION2" ]]; then
		RESULT=OK
	else
		RESULT="DIFF: $_VERSION1 != $_VERSION2"
	fi

	status "Check"	" $_TYPE $RESULT"
	status "" 	" $_VERSION1: $_FILE1"
	status ""	" $_VERSION2: $_FILE2"
}

do_self_check() {
	_FILE_CURRENT="$SCRIPT_CURRENT"
	do_self_check_version direnv_cli 		$_FILE_CURRENT $DIRENV_ROOT/bin/$SELF
	diff $_FILE_CURRENT $DIRENV_ROOT/bin/$SELF

	_FILE_CURRENT="$(direnv status|grep 'Loaded RC path' | cut -d' ' -f4-)"
	do_self_check_version .envrc 			$_FILE_CURRENT $DIRENV_TEMPLATES/master.envrc
	diff $_FILE_CURRENT $DIRENV_TEMPLATES/master.envrc

}

#------------------------------------------------------------------------------------------
install_check() {
	if [[ ! -n "$DIRENV_HOME" ]]; then
		error "direnv not setup correct. Missing DIRENV_HOME"
	fi
}

#------------------------------------------------------------------------------------------
install_defaults() {
	local _VERSION=$1; shift

	install_check

	local _FOLDER=$DIRENV_HOME/node/$_VERSION
	local _CONFIG=$DIRENV_FILE_CONFIG

	PATH=$_FOLDER/bin:$PATH

	if [[ !  -f $_CONFIG ]]; then
		LOG "No defaults file: $_CONFIG"
		exit
	fi

	grep default= $_CONFIG | cut -d= -f2 | while read _LINE
	do
		LOG "npm -g install $_LINE"
		npm -g install $_LINE
	done
}

#------------------------------------------------------------------------------------------
install_python() {
	local _FOLDER=$DIRENV_HOME

	install_check

	LOG "Create venv in $_FOLDER/python"
	python3 -m venv $_FOLDER/python

	LOG "Activate venv"
	. $_FOLDER/python/bin/activate

	LOG "Upgrade pip"
	pip install --upgrade pip
}

#------------------------------------------------------------------------------------------
install_node() {
	local _VERSION=$1

	[[ "$OSTYPE" =~ "linux"  ]] && _OS=linux
	[[ "$OSTYPE" =~ "darwin" ]] && _OS=darwin

	local _LINK=http://nodejs.org/dist/${_VERSION}/node-${_VERSION}-${_OS}-x64.tar.gz

	echo $_LINK

	install_check

	local _FOLDER=$DIRENV_HOME/node/$_VERSION
	local _TARFILE=$(basename "$_LINK")
	local _TARFLDR=$DIRENV_ROOT/cache
	local _TARPATH=$_TARFLDR/$_TARFILE

	install_check

	if [[ -f "$_TARPATH" ]]; then
		LOG "Use cached NodeJS archiv for version $_VERSION"
	else
		LOG "Download NodeJS archiv for version $_VERSION"
		mkdir -p "$_TARFLDR"
		curl -fsSL "$_LINK" -o "$_TARPATH"
	fi

	LOG "Create $_FOLDER"
	rm -rf   "$_FOLDER"
	mkdir -p "$_FOLDER"

	LOG "Unpack NodeJS archiv"
	cat "$_TARPATH" | tar xz --strip 1 -C "$_FOLDER"

	LOG "Add PATH $_FOLDER/bin"
	PATH=$_FOLDER/bin:$PATH

	LOG "Update NPM: $_FOLDER/bin/npm"
	$_FOLDER/bin/npm --silent -g install npm

	if [[ $OPT_WITH_DEFAULTS = "YES" ]]; then
		LOG "Install defaults"
		install_defaults $_VERSION
	fi
}

#------------------------------------------------------------------------------------------
install_yarn() {
	local _VERSION=$1
	local _FOLDER=$DIRENV_HOME/yarn

	install_check

	LOG "Install yarn"
	npm --silent -g install yarn

	LOG "Set Yarn Global Folder to ${_FOLDER}"
	yarn --silent config set global-folder ${_FOLDER}

	LOG "Set Yarn Cache  Folder to ${YARN_ROOT}/cache-folder"
	yarn --silent config set cache-folder  ${YARN_ROOT}/cache-folder

	yarn config list
}

#------------------------------------------------------------------------------------------
install_angular_only() {
	local _VERSION=$1
	local _FOLDER=$DIRENV_HOME/yarn

	install_check

	LOG "Install Angular CLI with yarn"
	yarn --silent global add @angular/cli
	rm /usr/local/bin/ng

	PATH=$_FOLDER/node_modules/.bin:$PATH

	LOG "Using ng from $(which ng)"
	ng config -g cli.packageManager yarn
}

#------------------------------------------------------------------------------------------
install_ionic_only() {
	local _VERSION=$1
	local _FOLDER=$DIRENV_HOME/yarn

	install_check

	LOG "Install Ionic"
	#yarn --silent global add  ionic
	yarn global add ionic

	LOG "Setup link to binaries"

	mkdir -p  $DIRENV_HOME/bin

	if [[ -f /usr/local/bin/ionic ]]; then
		rm -f                                             "$DIRENV_HOME/bin/ionic"
		ln -s "$DIRENV_HOME/yarn/node_modules/.bin/ionic" "$DIRENV_HOME/bin/ionic"
	fi
}

install_ionic() {
	local _VERSION=$1

	install_check

	install_python			$_VERSION
	install_node			$_VERSION
	install_yarn			$_VERSION
	install_ionic_only		$VERSION

	install_defaults
}

install_angular() {
	local _VERSION=$1

	install_check

	install_python			$_VERSION
	install_node			$_VERSION
	install_yarn			$_VERSION
	install_angular_only 		$_VERSION

	install_defaults
}

#------------------------------------------------------------------------------------------
init() {
	local _TYPE="${1:-master}"

	local _EXT
	if [[ -n "$_TYPE"  ]]; then
		_EXT="${_TYPE}"
	else
		_EXT="master"
	fi

	mkdir -p .env

	LOCAL_FILE_ENVRC=".envrc"
	LOCAL_FILE_CONFIG=".env/.envrc"

	MASTER_FILE_CONFIG="$DIRENV_TEMPLATES/${_EXT}.config"
	MASTER_FILE_ENVRC="$DIRENV_TEMPLATES/${_EXT}.envrc"

	#
	LOG "Create ${LOCAL_FILE_ENVRC} from $MASTER_FILE_ENVRC"
	cp $MASTER_FILE_ENVRC ${LOCAL_FILE_ENVRC}

	#
	if [[ ! -f "$DIRENV_FILE_CONFIG" ]]; then
		LOG "Create ${DIRENV_FILE_CONFIG} from $MASTER_FILE_CONFIG"
		cp $MASTER_FILE_CONFIG $DIRENV_FILE_CONFIG
	else
		LOG "Already exists: ${DIRENV_FILE_CONFIG}"
	fi

	#
	if [[ ! -f "$DIRENV_FILE_SSHUSR" ]]; then
		LOG "Create ${DIRENV_FILE_SSHUSR} for ${DIRENV_USER}"
		echo "$DIRENV_USER" >$DIRENV_FILE_SSHUSR
	else
		LOG "Already exists: ${DIRENV_FILE_SSHUSR}"
	fi
}

#------------------------------------------------------------------------------------------
ssh_agent_start() {
	_START=${#DIRENV_FILE_SSHENV}
	_REL_PATH="${DIRENV_HOME:$_START}"

	status  "SSH" "Start"     ""				"$_REL_PATH"
	/usr/bin/ssh-agent | sed 's/^echo/#echo/' >"${DIRENV_FILE_SSHENV}"

	chmod 600 "${DIRENV_FILE_SSHENV}"
	. "${DIRENV_FILE_SSHENV}" >/dev/null
}

#------------------------------------------------------------------------------------------
ssh_agent_status() {
	_START=${#DIRENV_FILE_SSHENV}
	_REL_PATH="${DIRENV_HOME:$_START}"

	if [[ ! -f "${DIRENV_FILE_SSHENV}" ]]; then
		status  "SSH" "NO SSH Environment"	""					"$_REL_PATH"
	else
		status  "SSH" "SSH Environment"	"$SSH_AGENT_PID"		"$_REL_PATH"
		. "${DIRENV_FILE_SSHENV}" > /dev/null

		cat "${DIRENV_FILE_SSHENV}"
		ps -ef | grep $SSH_AGENT_PID
	fi
}

#------------------------------------------------------------------------------------------
ssh_agent_stop() {
	_START=${#DIRENV_FILE_SSHENV}
	_REL_PATH="${DIRENV_HOME:$_START}"

	if [[ ! -f "${DIRENV_FILE_SSHENV}" ]]; then
		status  "SSH" "NO SSH Environment"	""					"$_REL_PATH"
	else
		. "${DIRENV_FILE_SSHENV}" > /dev/null

		ps $SSH_AGENT_PID 1>&- 2>&-
		_RC=$?


		if [[ "$_RC" = 0 ]]; then
			status  "SSH" "Stop"		"$SSH_AGENT_PID"	"$_REL_PATH"
			kill -9 $SSH_AGENT_PID

			rm -f "${DIRENV_FILE_SSHENV}"
		else
			status  "SSH" "SSH Agent"		"NO running agent"	"$_REL_PATH"
		fi
	fi

}


#------------------------------------------------------------------------------------------
	VERBOSE=false
	debug=false

	OPT_YSN_VERSION=NO
	OPT_YSN_INFO=NO
	OPT_YSN_HELP=NO

	OPT_MODE=MISSING
	OPT_TYPE=MISSING

	OPT_VERSION_USE_LATEST=NO

	OPT_VERSION=MISSING
	OPT_WITH_DEFAULTS=NO

	OPT_FORCE=NO

#------------------------------------------------------------------------------------------
	CMD_GETOPT=/usr/local/opt/gnu-getopt/bin/getopt
	CMD_GETOPT=getopt

	S_OPTS="vdm:"
	L_OPTS="verbose,debug,help,version, info"
	L_OPTS="$L_OPTS,list,update,check"
	L_OPTS="$L_OPTS,init:"
	L_OPTS="$L_OPTS,install:,install-version:,install-defaults,with-defaults"
	L_OPTS="$L_OPTS,ssh,ssh-start,ssh-stop,ssh-status"
	L_OPTS="$L_OPTS,envrc,edit-envrc,install-envrc,save-envrc"
	L_OPTS="$L_OPTS,config,show-config,edit-config,install-config,save-config"
	L_OPTS="$L_OPTS,force"

	OPTS=$($CMD_GETOPT --options "$S_OPTS"--longoptions "$L_OPTS"	-- "$@")

	eval set $OPTS
	shift

	while [[ $# -gt 0 ]]; do
		_P1="${1:-MISSING}"
		_P2="${2:-}"

		case "$1" in
			-v | --verbose)				VERBOSE=true;							;;
			-d | --debug)				DEBUGLEVEL="$_P2";				shift		;;

			--help)					OPT_YSN_HELP=YES;						;;
			--version|version)			OPT_YSN_VERSION=YES;						;;
			--info|info)				OPT_YSN_INFO=YES;						;;

			--update|update)			OPT_MODE=update;						;;
			--check|check)				OPT_MODE=check;							;;

			--force)				OPT_FORCE=YES;							;;

			--list|list)				OPT_MODE=list;							;;
			--init|init)				OPT_MODE=init;		OPT_TYPE="$_P2";	shift		;;
			--install|install)			OPT_MODE=install;	OPT_TYPE="$_P2";	shift		;;
	
			--install-version)			OPT_VERSION="$_P2";				shift		;;
			--with-defaults)			OPT_WITH_DEFAULTS=YES						;;
	
			--install-defaults)			OPT_MODE=install_defaults					;;

			--ssh|ssh)				OPT_MODE=ssh-$_P2						;;
			--ssh-start)				OPT_MODE=ssh-start						;;
			--ssh-stop)				OPT_MODE=ssh-stop						;;
			--ssh-status)				OPT_MODE=ssh-status						;;

			--show|show)				OPT_MODE=${_P2}-show;				shift		;;

			--envrc|envrc)				OPT_MODE=envrc-${_P2};				shift		;;
			--show-envrc|show-envrc)		OPT_MODE=envrc-show						;;
			--edit-envrc|edit-envrc)		OPT_MODE=envrc-edit						;;
			--install-envrc|install-envrc)		OPT_MODE=envrc-install						;;
			--save-envrc|save-envrc)		OPT_MODE=envrc-save;						;;

			--config|config)			OPT_MODE=config-${_P2};				shift		;;
			--show-config|show-config)		OPT_MODE=config-show						;;
			--edit-config|edit-config)		OPT_MODE=config-edit						;;
			--install-config|install-config)	OPT_MODE=config-install						;;
			--save-config|save-config)		OPT_MODE=config-save;						;;

			--)											shift;	break	;;
			*)					error "Unknown option '$_P1'";			break	;;
		esac
	
		shift
	done

#------------------------------------------------------------------------------------------
	debug 4 "DIRENV_ROOT        = $DIRENV_ROOT"
	debug 4 "DIRENV_HOME        = $DIRENV_HOME"
	debug 4 "DIRENV_USER        = $DIRENV_USER"
	debug 4 "DIRENV_FILE_CONFIG      = $DIRENV_FILE_CONFIG"
	debug 4 "DIRENV_FILE_SSHENV = $DIRENV_FILE_SSHENV"
	debug 4 "DIRENV_FILE_SSHUSR = $DIRENV_FILE_SSHUSR"
	debug 4 "DIRENV_TEMPLATES   = $DIRENV_TEMPLATES"

#------------------------------------------------------------------------------------------
	[[ "$OPT_VERSION" = "" ]] && OPT_VERSION=MISSING
	OPT_VERSION=${OPT_VERSION^^}

#------------------------------------------------------------------------------------------
	if [[ $OPT_MODE == install ]]; then
		OPT_MODE=$OPT_MODE/$OPT_TYPE
	fi

	[[ $OPT_YSN_HELP    == YES ]] && help
	[[ $OPT_YSN_VERSION == YES ]] && version
	[[ $OPT_YSN_INFO    == YES ]] && info


	if [[ $OPT_TYPE == node ]]; then
		if   [[ "$OPT_VERSION" == "MISSING" && "$OPT_YSN_VERSION" == YES ]]; then
			help "Missing Version. Use Parameter --install-version instead of --version"
		fi
	fi

	if   [[ "$OPT_VERSION" == "MISSING" ]]; then OPT_VERSION=v$(version_get LTS)
	elif [[ "$OPT_VERSION" == "LATEST"  ]]; then OPT_VERSION=v$(version_get LATEST)
	elif [[ "$OPT_VERSION" == "LTS"     ]]; then OPT_VERSION=v$(version_get LTS)
	elif [[ "$OPT_VERSION{0:1}" != "v"  ]]; then OPT_VERSION=v$OPT_VERSION
	fi

	debug 4 "VERSION         = $_DEPLOY_VERSION"
	debug 4 "OPT_YSN_HELP    = $OPT_YSN_HELP"
	debug 4 "OPT_YSN_VERSION = $OPT_YSN_VERSION"
	debug 4 "OPT_MODE        = $OPT_MODE"
	debug 4 "OPT_TYPE        = $OPT_TYPE"
	debug 4 "OPT_VERSION     = $OPT_VERSION"

	case $OPT_MODE in
		init)				init				$OPT_TYPE	;;
		update)				do_self_update					;;
		check)				do_self_check					;;

		version)			version;					;;
		help)				help;						;;

		install/node)			install_node			$OPT_VERSION	;;
		install/nodejs)			install_node			$OPT_VERSION	;;
		install/yarn)			install_yarn			$OPT_VERSION	;;

		install/angular)		install_angular			$OPT_VERSION	;;
		install/angular_only)		install_angular_only		$OPT_VERSION	;;

		install/ionic)			install_ionic			$OPT_VERSION	;;
		install/ionic_only)		install_ionic_only		$OPT_VERSION	;;

		install/python)			install_python					;;
		install_defaults)		install_defaults				;;

		config-install|install/config)	config_install					;;
		config-load)			config_load					;;
		config-show)			config_show					;;
		config-edit)			config_edit					;;
		config-install)			config_install					;;
		config-save)			config_save;					;;

		envrc-install|install/envrc)	envrc_install					;;
		envrc-load)			envrc_load					;;
		envrc-edit)			envrc_edit					;;
		envrc-install)			envrc_install					;;
		envrc-save)			envrc_save;					;;

		list)				version_get					;;

		ssh-start)			ssh_agent_start					;;
		ssh-stop)			ssh_agent_stop					;;
		ssh-status)			ssh_agent_status				;;

		*)				error "Unknown option '$OPT_MODE'"		;;
	esac

