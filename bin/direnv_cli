#!/usr/local/bin/bash
#vim: tabstop=4:
	set -u

#------------------------------------------------------------------------------------------
	_DEPLOY_VERSION=2.1.2-01

#------------------------------------------------------------------------------------------
	HERE="$PWD"

	THIS="$0"
	[[ -h "$THIS" ]] && THIS="$(readlink "$THIS")"

	SELF="$(basename "$0")"

	DIRENV_ROOT="$(direnv status | grep 'Loaded RC path' | cut -d' ' -f4- | xargs -I{} dirname {})"
	DIRENV_SCRIPT="$(which $SELF)"

	if [[ "$DIRENV_ROOT" == "" ]]; then
		DIRENV_ROOT="$PWD"
	fi
	DIRENV_HOME="$DIRENV_ROOT/.env"

	#
	DIRENV_FILE_ENVRC="$DIRENV_ROOT/.envrc"

	DIRENV_FILE_CONFIG="$DIRENV_HOME/.envrc.config"
	DIRENV_FILE_SSHENV="$DIRENV_HOME/.ssh-environment"
	DIRENV_FILE_SSHUSR="$DIRENV_HOME/.ssh-user"

	DIRENV_USER="$(basename "$PWD")"
	if [[ "|*-toolbox|" =~ "|$DIRENV_USER|" ]]; then
		:
	else
		DIRENV_USER="$(pwd | sed '1,$s/.*\/\(.*-toolbox\).*/\1/')"
	fi

	#
	MASTER_ROOT="$(cd $(dirname "$THIS")/..; pwd)"
	MASTER_SCRIPT="$MASTER_ROOT/bin/$SELF"
	MASTER_FLDR_TEMPLATES="$MASTER_ROOT/etc/templates"
	MASTER_FILE_ENVRC="$MASTER_FLDR_TEMPLATES/master.envrc"
	MASTER_FILE_CONFIG="$MASTER_FLDR_TEMPLATES/master.config"

	#
	DEPLOY_ROOT="${MASTER_ROOT}.Repository"
	DEPLOY_SCRIPT="$DEPLOY_ROOT/bin/$SELF"
	DEPLOY_FLDR_TEMPLATES=$DEPLOY_ROOT/etc/templates
	DEPLOY_FILE_ENVRC="$DEPLOY_ROOT/etc/templates/master.envrc"
	DEPLOY_FILE_CONFIG="$DEPLOY_ROOT/etc/templates/master.config"

#------------------------------------------------------------------------------------------
	YARN_GLOBAL_ROOT=/Users/Shared/CLOUD/Development.Yarn

#------------------------------------------------------------------------------------------
DEBUGLEVEL=0
debug() {
	local _LEVEL=$1;	shift;
	local _LINE="$*";	shift;

	if [[ "$_LEVEL" -le "$DEBUGLEVEL" ]]; then
		printf "DBG: %s\n" "$_LINE"
	fi
}

#------------------------------------------------------------------------------
        fg_black=30	; bg_black=40
        fg_red=31	; bg_red=41
        fg_green=32	; bg_green=42
        fg_yellow=33	; bg_yellow=43
        fg_blue=34	; bg_blue=44
        fg_magenta=35	; bg_magenta=45
        fg_cyan=36	; bg_cyan=46
        fg_white=37	; bg_white=47


	do_normal=0
	do_bold=1
	do_underline=4
	do_blink=5
	do_reverse=7

#------------------------------------------------------------------------------------------
colorize()
{
	debug 7 "colorize: $*"

	local _COLR; _COLR="${1:-RED}"; shift
        local _LINE; _LINE="$*"

        _COLR="${_COLR^^}"

        _MODE=NORMAL
        if [[ "${_COLR}" =~ "BG" ]]; then
                _MODE=BACKGROUND
                _COLR=${_COLR/_BG}
        fi

        _WITH_EOL=YES
        if [[ "${_COLR}" =~ "+" ]]; then
		_WITH_EOL=NO
                _COLR=${_COLR/+}
	fi

        case "$_COLR" in
                "RED")          _COLR_VAL="${fg_red}"		;;
                "GREEN")        _COLR_VAL="${fg_green}"		;;
                "YELLOW")       _COLR_VAL="${fg_yellow}"	;;
                "BLUE")         _COLR_VAL="${fg_blue}"		;;
                "MAGENTA")      _COLR_VAL="${fg_magenta}"	;;
                "CYAN")         _COLR_VAL="${fg_cyan}"		;;
                "WHITE")        _COLR_VAL="${fg_white}"		;;
        esac

        [[ "$_MODE" == "BACKGROUND" ]] && ((_COLR_VAL=$_COLR_VAL + 10))

	debug 8 "color is $_COLR"

        case "$_COLR" in
                "ERROR")        _COLR_ON="${fg_white};${bg_red}"   ; _COLR_OFF=0   ;;
                "HEADER")       _COLR_ON="${fg_white};${bg_blue}"  ; _COLR_OFF=0   ;;
                "SUBHEADER")    _COLR_ON="${fg_black};${bg_green}" ; _COLR_OFF=0   ;;
                "TEXT")         _COLR_ON="${fg_white};${bg_black}" ; _COLR_OFF=0   ;;
                "INVERSE")      _COLR_ON="${fg_black};${bg_white}" ; _COLR_OFF=0   ;;
                "HIGHLIGHT")    _COLR_ON="${fg_black};${bg_white}" ; _COLR_OFF=0   ;;
                *)              _COLR_ON="0;${_COLR_VAL}"          ; _COLR_OFF=0   ;;
        esac

	if   [[ "$_WITH_EOL" == NO ]]; then
		:
	elif [[ "|HIGHLIGHT|HEADER|SUBHEADER|INVERSE|ERROR|" =~ "$_COLR" ]]; then
		_LINE="$_LINE"'\e[K'
	fi

        echo -n -e '\e['${_COLR_ON}'m'"${_LINE}"'\e['${_COLR_OFF}'m'
	[[ "$_WITH_EOL" == YES ]] && printf "\n"
}

#------------------------------------------------------------------------------------------
relpath()
{
	local _RELPATH; _RELPATH="${1:-}"

	_RELPATH="$(echo "$_RELPATH" | sed "1,\$s#$MASTER_ROOT/#<MASTER>/#")"
	_RELPATH="$(echo "$_RELPATH" | sed "1,\$s#$DEPLOY_ROOT/#<DEPLOY>/#")"
	_RELPATH="$(echo "$_RELPATH" | sed "1,\$s#$HOME/#<HOME>/#")"
	_RELPATH="$(echo "$_RELPATH" | sed "1,\$s#$DIRENV_HOME/#<DIRENV>/#")"
	_RELPATH="$(echo "$_RELPATH" | sed "1,\$s#$DIRENV_HOME\$#<DIRENV>#")"

	echo "$_RELPATH"
}

#------------------------------------------------------------------------------------------
status()
{
	debug 5 "status:1| $*"

	_TYPE="${1:-LINE}"
	_TYPE="${_TYPE^^}"

	if [[ "|LINE|HIGHLIGHT|HEADER|SUBHEADER|ERROR|" =~ "$_TYPE" ]]; then
		shift
	fi

        _P1="${1:-}";	shift
        _P2="$*"

	debug 6 "status:2| TYPE=$_TYPE"
	debug 6 "status:2| P1  =$_P1"
	debug 6 "status:2| P2  =$_P2"

	if   [[ "|HIGHLIGHT|HEADER|SUBHEADER|ERROR|" =~ "$_TYPE" ]]; then
		debug 6 "status:3| TYPE=$_TYPE"
		colorize $_TYPE "$(printf "%-10s %s" "$_P1" "$_P2")"
	elif [[ "|xLINE|" =~ "$_TYPE" ]]; then
		debug 6 "status:4| TYPE=$_TYPE"
		printf "%-10s %s\n"		"$_P1" "$_P2"
	else
		debug 6 "status:5| DEFAULT"
		printf "%-10s %s%s\n"		"" "$_P1" "$_P2"
	fi
}

#------------------------------------------------------------------------------------------
info_with_check()
{
	debug 5 "info_with_check:1| $*"

	local _P1; _P1="${1:-}"
	local _P2; _P2="${2:-$_P1}"
	local _P3; _P3="${3:-$_P2}"

	_TYPE="$(file -b "$_P3" 2>&- | cut -d\, -f1)"

	status "$(printf "%s = %-60s (%s))" "${_P1}" "${_P2}" "$_TYPE")"
}

#------------------------------------------------------------------------------------------
run_info() {
	debug 5 "run_info:1| $*"

	status 		HEADER		"INFO"
	info_with_check			"SELF                  " "$(relpath "$SELF")"			"$SELF"
	status				"VERSION                = $(relpath "$_DEPLOY_VERSION")"
	info_with_check			"<HOME>                " "$HOME"
	info_with_check			"<DIRENV>              " "$DIRENV_HOME"
	info_with_check			"THIS                  " "$(relpath "$THIS")"			"$THIS"
	info_with_check			"HERE                  " "$(relpath "$HERE")"			"$HERE"

	info_with_check			"DIRENV_ROOT           " "$(relpath "$DIRENV_ROOT")"		"$DIRENV_ROOT"
	info_with_check			"DIRENV_HOME           " "$(relpath "$DIRENV_HOME")"		"$DIRENV_HOME"
	info_with_check			"DIRENV_FILE_SSHUSR    " "$(relpath "$DIRENV_FILE_SSHUSR")"	"$DIRENV_FILE_SSHUSR"
	info_with_check			"DIRENV_FILE_SSHENV    " "$(relpath "$DIRENV_FILE_SSHENV")"	"$DIRENV_FILE_SSHENV"

	status		SUBHEADER	"DIRENV" "<DIRENV>                 $DIRENV_ROOT"
	info_with_check			"<DIRENV>              " "$(relpath "$DIRENV_ROOT")"		"$DIRENV_ROOT"
	info_with_check			"DIRENV_ROOT           " "$(relpath "$DIRENV_ROOT")"		"$DIRENV_ROOT"
	info_with_check 		"DIRENV_SCRIPT         " "$(relpath "$DIRENV_SCRIPT")"		"$DIRENV_SCRIPT"
	info_with_check			"DIRENV_FILE_ENVRC     " "$(relpath "$DIRENV_FILE_ENVRC")"	"$DIRENV_FILE_ENVRC"
	info_with_check			"DIRENV_FILE_CONFIG    " "$(relpath "$DIRENV_FILE_CONFIG")"	"$DIRENV_FILE_CONFIG"

	status		SUBHEADER	"MASTER" "<MASTER>                 $MASTER_ROOT"
	info_with_check			"MASTER_ROOT           " "$(relpath "$MASTER_ROOT")"		"$MASTER_ROOT"
	info_with_check 		"MASTER_SCRIPT         " "$(relpath "$MASTER_SCRIPT")"		"$MASTER_SCRIPT"
	info_with_check 		"MASTER_FLDR_TEMPLATES " "$(relpath "$MASTER_FLDR_TEMPLATES")"	"$MASTER_FLDR_TEMPLATES"
	info_with_check 		"MASTER_FILE_ENVR      " "$(relpath "$MASTER_FILE_ENVRC")"	"$MASTER_FILE_ENVRC"
	info_with_check 		"MASTER_FILE_CONFIG    " "$(relpath "$MASTER_FILE_CONFIG")"	"$MASTER_FILE_CONFIG"

	status		SUBHEADER	"DEPLOY" "<DEPLOY>                 $DEPLOY_ROOT"
	info_with_check 		"DEPLOY_ROOT           " "$(relpath "$DEPLOY_ROOT")"		"$DEPLOY_ROOT"
	info_with_check 		"DEPLOY_SCRIPT         " "$(relpath "$DEPLOY_SCRIPT")"		"$DEPLOY_SCRIPT"
	info_with_check 		"DEPLOY_FLDR_TEMPLATES " "$(relpath "$DEPLOY_FLDR_TEMPLATES")"	"$DEPLOY_FLDR_TEMPLATES"
	info_with_check 		"DEPLOY_FILE_ENVR      " "$(relpath "$DEPLOY_FILE_ENVRC")"	"$DEPLOY_FILE_ENVRC"
	info_with_check 		"DEPLOY_FILE_CONFIG    " "$(relpath "$DEPLOY_FILE_CONFIG")" 	"$DEPLOY_FILE_CONFIG"


	exit
}

#------------------------------------------------------------------------------------------
run_intro() {
	colorize HEADER $SELF - A tool to extend direnv to customize your development environments

	exit 0
}

#------------------------------------------------------------------------------------------
run_help() {
	local _P1; _P1=${1:-MISSING}; shift

	if [[ "${_P1}" != "MISSING" ]]; then
		colorize ERROR "ERROR: $_P1"
	else
		colorize HEADER $SELF
	fi
	echo "Get an introduction with: $SELF intro"
	echo ""

	echo "Available options:"

	cat <<EOH

update <TYPE>			<DIRECTION>
update [all|script|config]	[""|from-master|from-deploy]
	Updates script (direnv_cli) and files  (.envrc, .envrc.config)

	Default for TYPE is 'all'. Default for DIRECTION is 'from-master'

	from-master: copy files from master folder to local folder
                     This means, we update the local  files from the master folder

	from-deploy: copy files from deploy repository to master folder
                     This means, we update the master files from the deploy repository


update <TYPE>			<DIRECTION>
deploy [all|scrint|envrc|config] [""|to-master|to-deploy]
	Deploys script (direnv_cli) and files  (.envrc, .envrc.config)

	Default for TYPE is 'all'. Default for DIRECTION is 'from-master'

	to-master: copy files from local folder to master folder
                   This means, we update the master files from the local folder

	to-deploy: copy files from master folder to deploy repository
                   This means, we update the deploy repository from the master files


	OPTION      | DIRECTION     | DESCRITION
	------------------------------------------
	update      | from-master   | Copy local  files from master folder
	update      | from-deploy   | Copy master files from deploy repository
	deploy	    | to-master     | Copy local  files to   master folder
	deploy      | to-deploy	    | Copy master files to   deploy repository
EOH

	exit

	echo $L_OPTS | tr ',' '\n' | while read _LINE
	do
		_OPT="${_LINE##:*}"
		_PAR="${_LINE%%*:}"

		if [[ ! -n $_PAR ]]; then
			_PAR="<parameter>"
		else
			_PAR=""
		fi

		printf "%10s %-20s %s\n" " " "$_OPT" "$_PAR"
	done

	exit
}

#------------------------------------------------------------------------------------------
run_version() {
	local _DIRENV_CONFIG_VERSION="$(grep -E '^\s+_DEPLOY_VERSION='  $DIRENV_FILE_ENVRC | cut -d= -f2)"
	local _MASTER_CONFIG_VERSION="$(grep -E '^\s+_DEPLOY_VERSION='  $MASTER_FILE_ENVRC | cut -d= -f2)"

	local _LEN; _LEN=${#SELF}
	local _PFX; _PFX="                        "; _PFX=${_PFX:0:$_LEN}

	echo "$SELF: CLI    $_DEPLOY_VERSION"
	echo "$_PFX  .envrc $_DIRENV_CONFIG_VERSION ($_MASTER_CONFIG_VERSION)"
	exit 0
}

#------------------------------------------------------------------------------------------
error() {
	colorize ERROR ERROR: $*
	exit 0
}



#echo "$HOME/xyz:	$(relpath $HOME/yxz)"
#echo "$DIRENV_ROOT:	$(relpath $DIRENV_ROOT)"
#echo "$DIRENV_HOME:	$(relpath $DIRENV_HOME)"
#echo "$DIRENV_FILE_ENVRC:		$(relpath $DIRENV_FILE_ENVRC)"
#echo "$(relpath $DIRENV_FILE_SSHENV)"
#echo "$(relpath $DIRENV_FILE_SSHUSR)"

#------------------------------------------------------------------------------------------
STEP=0
LOG() {
	local _LINE="$1"; shift
	local _MODE="${1:-RUN}"

	[[ $_MODE == INIT ]] && STEP=0

	(( STEP=$STEP + 1 ))

	if [[ "$_MODE" == "NONUMBER" ]]; then
		printf "%3s  %s\n" "" "$_LINE"

	else
		printf "%3d: %s\n" "$STEP" "$_LINE"
	fi
}

#-------------------------------------------------------------------------------
envrc_save()
{
	local _FILE="$DIRENV_FILE_ENVRC"
	local _VERSION="$(grep -E '^\s+_DEPLOY_VERSION='  $_FILE | cut -d= -f2)"

	#
	_DIRENV_FILE_ENVRC=".envrc"
	_MASTER_FILE_ENVRC="$MASTER_ROOT/etc/template/master.envrc"

	LOG "Copy '$_DIRENV_FILE_ENVRC' to '$_MASTER_FILE_ENVRC'"

	_YSN_SAVE=NO


	if   [[ ! -f "$_MASTER_FILE_ENVRC" ]]; then _YSN_SAVE=YES
	elif [[ "$OPT_FORCE" == "YES"      ]]; then _YSN_SAVE=YES
	else                                        LOG "Already exists: ${_MASTER_FILE_ENVRC}." NONUMBER
	                                            LOG "Use --force to overide" 		 NONUMBER
	fi

	if [[ "$_YSN_SAVE" == "YES" ]]; then
		cp $_FILE $_MASTER_FILE_ENVRC
		cp $_FILE $_MASTER_FILE_ENVRC.${_VERSION}
		LOG "Done: $_FILE $_MASTER_FILE_ENVRC.${_VERSION}"
	fi
}

#-------------------------------------------------------------------------------
envrc_edit()
{
	local _FILE="$DIRENV_FILE_ENVRC"
	local _VERSION="$(grep -E '^.+_DEPLOY_VERSION'  $_FILE | cut -d= -f2)"

	LOG "Edit $_FILE (Version $_VERSION)"

	if [[ -f "$_FILE" ]]; then
		vi "$_FILE"
	else
		error "$_FILE does not exist." NONUMBER
	fi
}

#-------------------------------------------------------------------------------
config_load()
{
        [[ -f "$DIRENV_FILE_CONFIG" ]] && eval $(grep -E '^use_' $DIRENV_FILE_CONFIG | tr "[:lower:]" "[:upper:]")

        export USE_IONIC="${USE_IONIC:-MISSING}"
        export USE_ANGULAR="${USE_ANGULAR:-MISSING}"
        export USE_NODE="${USE_NODE:-MISSING}"
        export USE_FLUTTER="${USE_FLUTTER:-MISSING}"
        export USE_DOTNET="${USE_DOTNET:-MISSING}"
        export USE_PYTHON="${USE_PYTHON:-MISSING}"
        export USE_FASTLANE="${USE_FASTLANE:-MISSING}"
        export USE_YARN="${USE_YARN:-MISSING}"
}

#-------------------------------------------------------------------------------
config_edit()
{
        if [[ -f  "$DIRENV_FILE_CONFIG" ]]; then
		vi $DIRENV_FILE_CONFIG
	else
		echo "ERROR: no config file present (install default with --install-config)"
	fi
}

#-------------------------------------------------------------------------------
config_install()
{
	local _EXT
	_EXT="master"

	LOG "Create ${_EXT}.config"

	_YSN_INSTALL=NO

	if   [[ ! -f "$DIRENV_FILE_CONFIG" ]]; then _YSN_INSTALL=YES
	elif [[ "$OPT_FORCE" == "YES"     ]]; then _YSN_INSTALL=YES
	else                                  LOG "$DIRENV_FILE_CONFIG already exists. User --force to overide" NONUMBER
	fi

	if [[ "$_YSN_INSTALL" == "YES" ]]; then
		cp $MASTER_FLDR_TEMPLATES/${_EXT}.config $DIRENV_FILE_CONFIG
		LOG "Installed: $MASTER_FLDR_TEMPLATES/${_EXT}.config"

		config_show
	fi
}
#-------------------------------------------------------------------------------
config_save()
{
	local _EXT="master"
	local _FILE="$DIRENV_FILE_CONFIG"
	local _VERSION="$(grep -E '^.+_DEPLOY_VERSION'  $_FILE | cut -d= -f2)"

	LOG "Copy $_FILE (Version $_VERSION) to ${_EXT}.config"

	_YSN_SAVE=NO


	if   [[ ! -f "$_FILE"          ]]; then _YSN_SAVE=YES
	elif [[ "$OPT_FORCE" == "YES"  ]]; then _YSN_SAVE=YES
	else                               LOG "$DIRENV_FILE_CONFIG already exists. User --force to overide" NONUMBER
	fi

	if [[ "$_YSN_SAVE" == "YES" ]]; then
		cp $_FILE $MASTER_FLDR_TEMPLATES/${_EXT}.config
		cp $_FILE $MASTER_FLDR_TEMPLATES/${_EXT}.config.${_VERSION}
		LOG "Done: $MASTER_FLDR_TEMPLATES/${_EXT}.config"
	fi
}

#-------------------------------------------------------------------------------
config_show()
{
	config_load

        LOG "Show configuration file"
        LOG "use_ionic    = ${USE_IONIC,,}"		NONUMBER
        LOG "use_angular  = ${USE_ANGULAR,,}"	NONUMBER
        LOG "use_node     = ${USE_NODE,,}"		NONUMBER
        LOG "use_flutter  = ${USE_FLUTTER,,}"	NONUMBER
        LOG "use_dotnet   = ${USE_DOTNET,,}"	NONUMBER
        LOG "use_python   = ${USE_PYTHON,,}"	NONUMBER
        LOG "use_fastlane = ${USE_FASTLANE,,}"	NONUMBER
        LOG "use_yarn     = ${USE_YARN,,}"		NONUMBER
}

#------------------------------------------------------------------------------------------
version_get() {
	local _VERSION="$1"

	if [[ "$_VERSION" == "LTS" ]]; then
		curl -s http://nodejs.org/dist/index.tab | grep -v '^version' | sed '1,$s/^v//' |  awk '$10 != "-" { print $1 }'|head -1
	else
		if [[ "$_VERSION" == "LATEST" ]]; then
			_FILTER="sed -n 2p"
		else
			_FILTER="sed -n 2,10p"
		fi

		curl -s http://nodejs.org/dist/index.tab | sed '1,$s/^v//' |  awk '{ print $1 }' | $_FILTER
	fi
}

#------------------------------------------------------------------------------------------
do_show_versions() {
	debug 5 "do_show_version:"

	_FILTER="sed -n 2,10p"
	curl -s http://nodejs.org/dist/index.tab | sed '1,$s/^v//' |  awk '{ print $1 }' | $_FILTER
}

#------------------------------------------------------------------------------------------
do_update() {
	debug 5 "do_update:1 | $*"

	local _TYPE; _TYPE="${1:-MISSING}"; _TYPE="${_TYPE^^}";	shift
	local _FILE; _FILE="${1:-MISSING}"; _FILE="${_FILE^^}";	shift
	local _SRC;   _SRC="${1:-MISSING}"; shift
	local _DST;   _DST="${1:-MISSING}"; shift

	#
	debug 2 "do_update:2 | TYPE=$_TYPE FILE=$_FILE SRC=$_SRC DST=$_DST"

	case "$_FILE" in
		SCRIPT)		_FROM=SCRIPT			;;
		ENVRC)		_FROM=FILE_ENVRC		;;
		CONFIG)		_FROM=FILE_CONFIG		;;
	esac


	_FILE_SRC="${_SRC}_${_FROM}"	; debug 2 "do_update:2 | SRC=$_FILE_SRC"
	_FILE_SRC="${!_FILE_SRC}"		; debug 2 "do_update:2 | SRC=$_FILE_SRC"

	_FILE_DST="${_DST}_${_FROM}"	; debug 2 "do_update:2 | DST=$_FILE_DST"
	_FILE_DST="${!_FILE_DST}"		; debug 2 "do_update:2 | DST=$_FILE_DST"

	echo "cp $_FILE_SRC $_FILE_DST"
	return

	case "$_FILE" in
		SCRIPT)	info_with_check "DIRENV_SCRIPT         " "$(relpath "$DIRENV_SCRIPT")"		"$DIRENV_SCRIPT"
				info_with_check "MASTER_SCRIPT         " "$(relpath "$MASTER_SCRIPT")"		"$MASTER_SCRIPT"
				info_with_check "DEPLOY_SCRIPT         " "$(relpath "$DEPLOY_SCRIPT")"		"$DEPLOY_SCRIPT"
				;;

		ENVRC)	info_with_check	"DIRENV_FILE_ENVRC     " "$(relpath "$DIRENV_FILE_ENVRC")"	"$DIRENV_FILE_ENVRC"
				info_with_check "DEPLOY_FILE_ENVRC     " "$(relpath "$DEPLOY_FILE_ENVRC")"	"$DEPLOY_FILE_ENVRC"
				info_with_check "MASTER_FILE_ENVRC     " "$(relpath "$MASTER_FILE_ENVRC")"	"$MASTER_FILE_ENVRC"
				;;

		CONFIG)	info_with_check	"DIRENV_FILE_CONFIG    " "$(relpath "$DIRENV_FILE_CONFIG")"	"$DIRENV_FILE_CONFIG"
				info_with_check "MASTER_FILE_CONFIG    " "$(relpath "$MASTER_FILE_CONFIG")"	"$MASTER_FILE_CONFIG"
				info_with_check "DEPLOY_FILE_CONFIG    " "$(relpath "$DEPLOY_FILE_CONFIG")"	"$DEPLOY_FILE_CONFIG"
				;;
		*)
				;;
	esac
}

#------------------------------------------------------------------------------------------
run_update_or_deploy() {
	debug 5 "run_update_or_deploy:1 | $*"

	local _MODE; _MODE="${1:-MISSING}"; _MODE="${_MODE^^}"; shift
	local _TYPE; _TYPE="${1:-MISSING}"; _TYPE="${_TYPE^^}"; shift
	local _PARM; _PARM="$*"

	#
	case "$_MODE/$_PARM" in
		UPDATE/FROM-MASTER)	_SRC=MASTER; _DST=DIRENV				;;
		UPDATE/FROM-DEPLOY)	_SRC=DEPLOY; _DST=MASTER				;;
		UPDATE/TO-MASTER)	_SRC=DIRENV; _DST=MASTER				;;
		UPDATE/TO-DEPLOY)	_SRC=MASTER; _DST=DEPLOY				;;

		DEPLOY/FROM-MASTER)	_SRC=MASTER; _DST=DEPLOY				;;
		DEPLOY/FROM-LOCAL)	_SRC=DIRENV; _DST=MASTER				;;
		DEPLOY/TO-MASTER)	_SRC=DIRENV; _DST=MASTER				;;
		DEPLOY/TO-DEPLOY)	_SRC=MASTER; _DST=DEPLOY				;;

		*)			_SRC_WRONG ; _DST=WRONG					;;

	esac
	debug 6 "run_update_or_deploy:2 | TYPE=$_TYPE MODE=$_MODE PARM=$_PARM SRC=$_SRC DST=$_DST"

	#colorize HEADER "Update $SELF: $_MODE TYPE=$_TYPE from $_SRC to $_DST"

	debug 6 "run_update_or_deploy:3 | check type ($_TYPE) for SCRIPT"
	if [[ "|MISSING|ALL|SCRIPT|" =~ "$_TYPE" ]]; then
		#colorize SUBHEADER "Update SCRIPT"

		do_update $_MODE SCRIPT $_SRC $_DST
	fi

	debug 6 "run_update_or_deploy:4 | check type ($_TYPE) for ENVRC"
	if [[ "|MISSING|ALL|ENVRC|" =~ "$_TYPE" ]]; then
		#colorize SUBHEADER "Update ENVRC"

		do_update $_MODE ENVRC $_SRC $_DST
	fi

	debug 6 "run_update_or_deploy:5 | check type ($_TYPE) for CONFIG"
	if [[ "|MISSING|ALL|CONFIG|" =~ "$_TYPE" ]]; then
		#colorize SUBHEADER "Update CONFIG"

		do_update $_MODE CONFIG	$_SRC $_DST
	fi
}

do_check_version() {
	debug 5 "do_check_version:1| $*"

	local _TITLE="$1";	shift
	local _FILE_L="$1";	shift
	local _FILE_M="$1";	shift
	local _FILE_D="$1";	shift

	local _VERSION_L="$(grep -E '^\s+_DEPLOY_VERSION'  $_FILE_L | cut -d= -f2)"
	local _VERSION_M="$(grep -E '^\s+_DEPLOY_VERSION'  $_FILE_M | cut -d= -f2)"
	local _VERSION_D="$(grep -E '^\s+_DEPLOY_VERSION'  $_FILE_D | cut -d= -f2)"

	debug 6 "do_check_version:2| L V=$_VERSION_L F=$_FILE_L"
	debug 6 "do_check_version:2| M V=$_VERSION_M F=$_FILE_M"
	debug 6 "do_check_version:2| D V=$_VERSION_D F=$_FILE_D"

	colorize SUBHEADER "$_TITLE"

	status LINE	"DIRENV"		"$_VERSION_L"

	_HEADER=LINE
	_DETAILS=""
	if [[ "$_VERSION_L"  != "$_VERSION_M" ]]; then
		_HEADER=ERROR
		_DETAILS="(show details with option --details)"
	fi
	status $_HEADER	"MASTER"	"$_VERSION_M" "$_DETAILS"

	if [[ $OPT_SHOW_DETAILS == YES ]]; then
		status LINE "$_VERSION_L | $_VERSION_M"

		diff	"$_FILE_L" "$_FILE_M"
	fi

	#
	#
	_HEADER=LINE
	_DETAILS=""
	if [[ "$_VERSION_M"  != "$_VERSION_D" ]]; then
		_HEADER=ERROR
		_DETAILS="(show details with option --details)"
	fi
	status $_HEADER	"DEPLOY"	"$_VERSION_D" "$_DETAILS"

	if [[ $OPT_SHOW_DETAILS == YES ]]; then
		status LINE "$_VERSION_M  $_VERSION_D"

		diff	"$_FILE_M" "$_FILE_D"
	fi
}

#----------------------------------------------------------------------------------------------------
run_test()
{
	debug 5 "run_test:1 | $*"

	$DIRENV_SCRIPT -d 6 update script from-master | grep run_update_or_deploy:2
	$DIRENV_SCRIPT -d 6 update script from-deploy | grep run_update_or_deploy:2
	$DIRENV_SCRIPT -d 6 deploy script to-master   | grep run_update_or_deploy:2
	$DIRENV_SCRIPT -d 6 deploy script to-deploy   | grep run_update_or_deploy:2

	exit
}

#----------------------------------------------------------------------------------------------------
run_check() {
	debug 5 "run_check: $*"

	colorize HEADER "Check files (L=local, M=Master, D=Deploy)"

	do_check_version "Check command line script: direnc_cli"	\
			"$DIRENV_SCRIPT"									\
			"$MASTER_ROOT/bin/$SELF"							\
			"$DEPLOY_ROOT/bin/$SELF"

	do_check_version "Check .envrc script" 						\
			"$DIRENV_FILE_ENVRC"								\
			"$MASTER_FLDR_TEMPLATES/master.envrc"				\
			"$DEPLOY_FLDR_TEMPLATES/master.envrc"
}

#------------------------------------------------------------------------------------------
install_check() {
	if [[ ! -n "$DIRENV_HOME" ]]; then
		error "direnv not setup correct. Missing DIRENV_HOME"
	fi
}

#------------------------------------------------------------------------------------------
install_defaults() {
	local _VERSION=$1; shift

	install_check

	local _FOLDER=$DIRENV_HOME/node/$_VERSION
	local _CONFIG=$DIRENV_FILE_CONFIG

	status HEADER "Install Defaults"

	PATH=$_FOLDER/bin:$PATH

	if [[ !  -f $_CONFIG ]]; then
		LOG "No defaults file: $_CONFIG"
		exit
	fi

	grep default= $_CONFIG | cut -d= -f2 | while read _LINE
	do
		LOG "npm -g install $_LINE"
		npm -g install $_LINE
	done
}

#------------------------------------------------------------------------------------------
install_python() {
	local _FOLDER=$DIRENV_HOME

	install_check

	status HEADER "Install Python"

	LOG "Create venv in $_FOLDER/python"
	python3 -m venv $_FOLDER/python

	LOG "Activate venv"
	. $_FOLDER/python/bin/activate

	LOG "Upgrade pip"
	pip install --upgrade pip
}

#------------------------------------------------------------------------------------------
install_node() {
	local _VERSION=$1

	[[ "$OSTYPE" =~ "linux"  ]] && _OS=linux
	[[ "$OSTYPE" =~ "darwin" ]] && _OS=darwin

	local _LINK=http://nodejs.org/dist/${_VERSION}/node-${_VERSION}-${_OS}-x64.tar.gz

	status HEADER "Install NodeJS from $_LINK"

	install_check

	local _FOLDER=$DIRENV_HOME/node/$_VERSION
	local _TARFILE=$(basename "$_LINK")
	local _TARFLDR=$MASTER_ROOT/cache
	local _TARPATH=$_TARFLDR/$_TARFILE

	if [[ -f "$_TARPATH" ]]; then
		LOG "Use cached NodeJS archiv for version $_VERSION"
	else
		LOG "Download NodeJS archiv for version $_VERSION"
		mkdir -p "$_TARFLDR"
		curl -fsSL "$_LINK" -o "$_TARPATH"
	fi

	LOG "Create $_FOLDER"
	rm -rf   "$_FOLDER"
	mkdir -p "$_FOLDER"

	LOG "Unpack NodeJS archiv"
	cat "$_TARPATH" | tar xz --strip 1 -C "$_FOLDER"

	LOG "Add PATH $_FOLDER/bin"
	PATH=$_FOLDER/bin:$PATH

	LOG "Update NPM: $_FOLDER/bin/npm"
	$_FOLDER/bin/npm --silent -g install npm

	if [[ $OPT_WITH_DEFAULTS = "YES" ]]; then
		LOG "Install defaults"
		install_defaults $_VERSION
	fi
}

#------------------------------------------------------------------------------------------
install_yarn() {
	local _VERSION=$1
	local _FOLDER=$DIRENV_HOME/yarn

	install_check

	status HEADER "Install Yarn"

	LOG "Install yarn"
	npm --silent -g install yarn

	LOG "Set Yarn Global Folder to ${_FOLDER}"
	yarn --silent config set global-folder ${_FOLDER}

	LOG "Set Yarn Cache  Folder to ${YARN_GLOBAL_ROOT}/cache-folder"
	yarn --silent config set cache-folder  ${YARN_GLOBAL_ROOT}/cache-folder

	yarn config list
}

#------------------------------------------------------------------------------------------
install_angular_only() {
	local _VERSION=$1
	local _FOLDER=$DIRENV_HOME/yarn

	install_check

	status HEADER "Install Angular CLI"

	LOG "Install Angular CLI with yarn"
	yarn --silent global add @angular/cli
	rm /usr/local/bin/ng

	PATH=$_FOLDER/node_modules/.bin:$PATH

	LOG "Using ng from $(which ng)"
	ng config -g cli.packageManager yarn
}

#------------------------------------------------------------------------------------------
install_ionic_only() {
	local _VERSION=$1
	local _FOLDER=$DIRENV_HOME/yarn

	install_check

	status HEADER "Install Ionic"

	LOG "Install Ionic"
	#yarn --silent global add  ionic
	yarn global add ionic

	LOG "Setup link to binaries"

	mkdir -p  $DIRENV_HOME/bin

	if [[ -f /usr/local/bin/ionic ]]; then
		rm -f                                             "$DIRENV_HOME/bin/ionic"
		ln -s "$DIRENV_HOME/yarn/node_modules/.bin/ionic" "$DIRENV_HOME/bin/ionic"
	fi
}

install_ionic() {
	local _VERSION=$1

	install_check

	status HEADER "Install Ionic and additional Tools"

	install_python			$_VERSION
	install_node			$_VERSION
	install_yarn			$_VERSION
	install_ionic_only		$_VERSION

	install_defaults
}

install_angular() {
	local _VERSION=$1

	install_check

	status HEADER "Install Angular  and additional Tools"

	install_python			$_VERSION
	install_node			$_VERSION
	install_yarn			$_VERSION
	install_angular_only 		$_VERSION

	install_defaults
}

#------------------------------------------------------------------------------------------
run_init() {
	debug 5 "run_init:1 | $*"

	local _EXT="${1:-master}"

	_DIRENV_FILE_ENVRC="$PWD/.envrc"
	_DIRENV_FILE_CONFIG="$PWD/.env/.envrc.config"
	_DIRENV_FILE_SSHUSR="$PWD/.env/.ssh-user"

	_MASTER_FILE_ENVRC="$MASTER_FLDR_TEMPLATES/${_EXT}.envrc"
	_MASTER_FILE_CONFIG="$MASTER_FLDR_TEMPLATES/${_EXT}.config"

	status HEADER "Initialize"

	#
	debug 5 "run_init:2 | create folder .env"
	mkdir -p .env

	#
	LOG "Create .envrc        $_DIRENV_FILE_ENVRC"
	LOG "       from Master   $_MASTER_FILE_ENVRC"
	cp $_MASTER_FILE_ENVRC ${_DIRENV_FILE_ENVRC}
	[[ ! -f $_DIRENV_FILE_ENVRC ]] && error "copy not successfull: $_DIRENV_FILE_ENVRC"

	#
	if [[ -f "$_DIRENV_FILE_CONFIG" ]]; then
		LOG "Already exists: ${_DIRENV_FILE_CONFIG}"
	else
		LOG "Create .envrc.config $_DIRENV_FILE_CONFIG"
		LOG "       from Master   $_MASTER_FILE_CONFIG"
		cp $_MASTER_FILE_CONFIG $_DIRENV_FILE_CONFIG

		[[ ! -f $_DIRENV_FILE_CONFIG ]] && error "copy not successfull: $_DIRENV_FILE_CONFIG"
	fi

	#
	if [[ -f "$_DIRENV_FILE_SSHUSR" ]]; then
		LOG "Already exists: ${_DIRENV_FILE_SSHUSR}"
	else
		LOG "Create .env/.ssh-user (${_DIRENV_FILE_SSHUSR} for ${DIRENV_USER})"
		echo "$DIRENV_USER" >$_DIRENV_FILE_SSHUSR
	fi
}

#------------------------------------------------------------------------------------------
ssh_agent_start() {
	_START=${#DIRENV_FILE_SSHENV}
	_REL_PATH="${DIRENV_HOME:$_START}"

	status  "SSH" "Start"     ""				"$_REL_PATH"
	/usr/bin/ssh-agent | sed 's/^echo/#echo/' >"${DIRENV_FILE_SSHENV}"

	chmod 600 "${DIRENV_FILE_SSHENV}"
	. "${DIRENV_FILE_SSHENV}" >/dev/null
}

#------------------------------------------------------------------------------------------
ssh_agent_status() {
	_START=${#DIRENV_FILE_SSHENV}
	_REL_PATH="${DIRENV_HOME:$_START}"

	if [[ ! -f "${DIRENV_FILE_SSHENV}" ]]; then
		status  "SSH" "NO SSH Environment"	""					"$_REL_PATH"
	else
		status  "SSH" "SSH Environment"	"$SSH_AGENT_PID"		"$_REL_PATH"
		. "${DIRENV_FILE_SSHENV}" > /dev/null

		cat "${DIRENV_FILE_SSHENV}"
		ps -ef | grep $SSH_AGENT_PID
	fi
}

#------------------------------------------------------------------------------------------
ssh_agent_stop() {
	_START=${#DIRENV_FILE_SSHENV}
	_REL_PATH="${DIRENV_HOME:$_START}"

	if [[ ! -f "${DIRENV_FILE_SSHENV}" ]]; then
		status  "SSH" "NO SSH Environment"	""					"$_REL_PATH"
	else
		. "${DIRENV_FILE_SSHENV}" > /dev/null

		ps $SSH_AGENT_PID 1>&- 2>&-
		_RC=$?


		if [[ "$_RC" = 0 ]]; then
			status  "SSH" "Stop"		"$SSH_AGENT_PID"	"$_REL_PATH"
			kill -9 $SSH_AGENT_PID

			rm -f "${DIRENV_FILE_SSHENV}"
		else
			status  "SSH" "SSH Agent"		"NO running agent"	"$_REL_PATH"
		fi
	fi

}


#------------------------------------------------------------------------------------------
	VERBOSE=false
	debug=false

	OPT_YSN_VERSION=NO
	OPT_YSN_INFO=NO
	OPT_YSN_HELP=NO
	OPT_YSN_INTRO=NO
	OPT_YSN_TEST=NO

	OPT_CMD=MISSING
	OPT_TYPE=MISSING

	OPT_DIRECTION=MISSING

	OPT_VERSION_USE_LATEST=NO

	OPT_VERSION=MISSING
	OPT_WITH_DEFAULTS=NO

	OPT_FORCE=NO
	OPT_SHOW_DETAILS=NO

#------------------------------------------------------------------------------------------
	CMD_GETOPT=/usr/local/opt/gnu-getopt/bin/getopt
	CMD_GETOPT=getopt

	S_OPTS="vdm:"

	L_OPTS="verbose,debug,help,version,info,intro"
	L_OPTS="$L_OPTS,list,update:,check"
	L_OPTS="$L_OPTS,init:"
	L_OPTS="$L_OPTS,install:,install-version:,install-defaults,with-defaults"
	L_OPTS="$L_OPTS,ssh,ssh-start,ssh-stop,ssh-status"
	L_OPTS="$L_OPTS,envrc,edit-envrc,install-envrc,save-envrc"
	L_OPTS="$L_OPTS,config,show-config,edit-config,install-config,save-config"
	L_OPTS="$L_OPTS,force,details"

	OPTS=$($CMD_GETOPT --options "$S_OPTS"--longoptions "$L_OPTS"	-- "$@")

	eval set $OPTS
	shift

	while [[ $# -gt 0 ]]; do
		_P1="${1:-MISSING}"
		[[ "$_P1" != "--" ]] && _P1="${1#--}"

		_P2="${2:-}"

		debug 4 "P1=$_P1 P2=$_P2"

		case "$_P1" in
			-v | verbose)		VERBOSE=true;										;;
			-d | debug)			DEBUGLEVEL="$_P2";						shift		;;

			intro)				OPT_YSN_INTRO=YES;									;;
			help)				OPT_YSN_HELP=YES;									;;
			version)			OPT_YSN_VERSION=YES;								;;
			info)				OPT_YSN_INFO=YES;									;;

			update)				OPT_CMD=update;										;;
			deploy)				OPT_CMD=deploy;										;;
			check)				OPT_CMD=check;										;;

			force)				OPT_FORCE=YES;										;;
			details)			OPT_SHOW_DETAILS=YES;								;;

			list)				OPT_CMD=list;										;;
			init)				OPT_CMD=init;		OPT_TYPE="$_P2";	shift		;;
			install)			OPT_CMD=install;	OPT_TYPE="$_P2";	shift		;;

			version)			OPT_VERSION="$_P2";						shift		;;
			with-defaults)		OPT_WITH_DEFAULTS=YES								;;

			install-version)	OPT_VERSION="$_P2";						shift		;;
			install-defaults)	OPT_CMD=install_defaults							;;

			ssh)				OPT_CMD=ssh-$_P2									;;
			ssh-start)			OPT_CMD=ssh-start									;;
			ssh-stop)			OPT_CMD=ssh-stop									;;
			ssh-status)			OPT_CMD=ssh-status									;;

			show)				[[ -n $_P2 ]] && _P2="${_P2}-"
								OPT_CMD=${_P2}show;						shift		;;

			envrc)				OPT_CMD=envrc-${_P2};					shift		;;
			show-envrc)			OPT_CMD=envrc-show									;;
			edit-envrc)			OPT_CMD=envrc-edit									;;
			install-envrc)		OPT_CMD=envrc-install								;;
			save-envrc)			OPT_CMD=envrc-save;									;;

			config)				OPT_CMD=config-${_P2};					shift		;;
			show-config)		OPT_CMD=config-show									;;
			edit-config)		OPT_CMD=config-edit									;;
			install-config)		OPT_CMD=config-install								;;
			save-config)		OPT_CMD=config-save;								;;


			#
			script)				OPT_TYPE=SCRIPT;									;;
			config)				OPT_TYPE=CONFIG;									;;

			to-local)			OPT_DIRECTION="${_P1^^}";				shift		;;
			to-master)			OPT_DIRECTION="${_P1^^}";				shift		;;
			to-deploy)			OPT_DIRECTION="${_P1^^}";				shift		;;

			from-master)		OPT_DIRECTION="${_P1^^}";				shift		;;
			from-deploy)		OPT_DIRECTION="${_P1^^}";				shift		;;

			test)				OPT_YSN_TEST=YES;						shift		;;

			--)															shift; break;;
			*)					# Unknown option $_P1
								OPT_CMD="$_P1"										;;
		esac

		shift
	done

#------------------------------------------------------------------------------------------
	debug 4 "DIRENV_ROOT        = $DIRENV_ROOT"
	debug 4 "DIRENV_HOME        = $DIRENV_HOME"
	debug 4 "DIRENV_USER        = $DIRENV_USER"
	debug 4 "DIRENV_FILE_CONFIG      = $DIRENV_FILE_CONFIG"
	debug 4 "DIRENV_FILE_SSHENV = $DIRENV_FILE_SSHENV"
	debug 4 "DIRENV_FILE_SSHUSR = $DIRENV_FILE_SSHUSR"
	debug 4 "MASTER_FLDR_TEMPLATES   = $MASTER_FLDR_TEMPLATES"

#------------------------------------------------------------------------------------------
	[[ "$OPT_VERSION" = "" ]] && OPT_VERSION=MISSING
	OPT_VERSION=${OPT_VERSION^^}

#------------------------------------------------------------------------------------------
	if [[ $OPT_CMD == install ]]; then
		OPT_CMD=$OPT_CMD/$OPT_TYPE
	fi

	[[ $OPT_YSN_INTRO   == YES ]] && run_intro
	[[ $OPT_YSN_HELP    == YES ]] && run_help
	[[ $OPT_YSN_VERSION == YES ]] && run_version
	[[ $OPT_YSN_INFO    == YES ]] && run_info
	[[ $OPT_YSN_TEST    == YES ]] && run_test


	if [[ $OPT_TYPE == node ]]; then
		if   [[ "$OPT_VERSION" == "MISSING" && "$OPT_YSN_VERSION" == YES ]]; then
			run_help "Missing parameter <version>. Use Parameter --install-version instead of --version"
		fi
	fi

	if   [[ "$OPT_VERSION" == "MISSING" ]]; then OPT_VERSION=v$(version_get LTS)
	elif [[ "$OPT_VERSION" == "LATEST"  ]]; then OPT_VERSION=v$(version_get LATEST)
	elif [[ "$OPT_VERSION" == "LTS"     ]]; then OPT_VERSION=v$(version_get LTS)
	elif [[ "$OPT_VERSION{0:1}" != "v"  ]]; then OPT_VERSION=v$OPT_VERSION
	fi

	debug 4 "VERSION         = $_DEPLOY_VERSION"
	debug 4 "OPT_YSN_HELP    = $OPT_YSN_HELP"
	debug 4 "OPT_YSN_VERSION = $OPT_YSN_VERSION"
	debug 4 "OPT_VERSION     = $OPT_VERSION"

	debug 4 "OPT_CMD         = $OPT_CMD"
	debug 4 "OPT_TYPE        = $OPT_TYPE"
	debug 4 "OPT_DIRECTION   = $OPT_DIRECTION"

	debug 4 "check mode $OPT_CMD"
	case $OPT_CMD in
		init)					run_init				$OPT_TYPE					;;
		check)					run_check 				$OPT_TYPE					;;

		update|deploy)			run_update_or_deploy $OPT_CMD $OPT_TYPE	$OPT_DIRECTION		;;

		version)				version;											;;
		help)					run_help;											;;

		install/node)			install_node			$OPT_VERSION				;;
		install/nodejs)			install_node			$OPT_VERSION				;;
		install/yarn)			install_yarn			$OPT_VERSION				;;

		install/angular)		install_angular			$OPT_VERSION				;;
		install/angular_only)	install_angular_only	$OPT_VERSION				;;

		install/ionic)			install_ionic			$OPT_VERSION				;;
		install/ionic_only)		install_ionic_only		$OPT_VERSION				;;

		install/python)			install_python										;;
		install_defaults)		install_defaults									;;

		config-install)			config_install										;;
		install/config)			config_install										;;
		config-load)			config_load											;;
		config-show)			config_show											;;
		config-edit)			config_edit											;;
		config-install)			config_install										;;
		config-save)			config_save;										;;

		envrc-install)			envrc_install										;;
		install/envrc)			envrc_install										;;
		envrc-load)				envrc_load											;;
		envrc-edit)				envrc_edit											;;
		envrc-install)			envrc_install										;;
		envrc-save)				envrc_save;											;;

		list)					version_get											;;

		ssh-start)				ssh_agent_start										;;
		ssh-stop)				ssh_agent_stop										;;
		ssh-status)				ssh_agent_status									;;

		install/)				run_help "Missing parameter <product>"				;;
		show)					run_help "Missing paramater"						;;

		MISSING)				run_help ""											;;

		*)					# Unknown option/parameter '$OPT_CMD'"
							direnv $OPT_CMD											;;
	esac

