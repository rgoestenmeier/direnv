#!/bin/bash
# vim: tabstop=4:

#------------------------------------------------------------------------------------------
	_DEPLOY_VERSION=1.4.1-01

#------------------------------------------------------------------------------------------
	THIS="$0"
	[[ -h "$THIS" ]] && THIS="$(readlink "$THIS")"

	HERE="$(cd $(dirname "$THIS"); pwd)"
	SELF="$(basename "$0")"

	DIRENV_ROOT="$(cd "$HERE"/..; pwd)"
	DIRENV_TEMPLATES=$DIRENV_ROOT/etc/templates
	DIRENV_BASE=$PWD/.env

	DIRENV_HOME="$(direnv status | grep 'Loaded RC path' | cut -d' ' -f4- | xargs -I{} dirname {})"

	if [[ "$DIRENV_HOME" == "" ]]; then
		DIRENV_HOME="$PWD/.env"
	else
		DIRENV_HOME="$DIRENV_HOME/.env"
	fi

	SSH_USR="$(basename "$HERE")"
	SSH_ENV="$DIRENV_HOME/.ssh-environment"
	SSH_USR="$(cat $DIRENV_HOME/.envrc.ssh-user 2>&-)"

	#echo "DIRENV_ROOT      = $DIRENV_ROOT"
	#echo "DIRENV_TEMPLATES = $DIRENV_TEMPLATES"
	#echo "DIRENV_HOME      = $DIRENV_HOME"

	SCRIPT_CURRENT="$(which $SELF)"
	SCRIPT_MASTER="$DIRENV_ROOT/bin/direnv_cli"

#------------------------------------------------------------------------------------------
	YARN_ROOT=/Users/Shared/CLOUD/Development.Yarn

#------------------------------------------------------------------------------------------
debug() {
	local _LEVEL=$1;	shift;
	local _LINE="$*";	shift;
	
	printf "DBG: %s\n" "$_LINE"
}

#------------------------------------------------------------------------------------------
status()
{
        _P1="${1:-}"; shift
        _P2="${1:-}"; shift
        _P3="${1:-}"; shift
        _P4="$*"

        printf "%-10s: %-10s %-20s  %s\n" "$_P1" "$_P2" "$_P3" "$_P4"
}

#------------------------------------------------------------------------------------------
do_info() {
	echo "SELF             = $SELF"
	echo "VERSION          = $_DEPLOY_VERSION"
	echo "THIS             = $THIS"
	echo "HERE             = $HERE"
	echo "DIRENV_ROOT      = $DIRENV_ROOT"
	echo "DIRENV_TEMPLATES = $DIRENV_TEMPLATES"
	echo "DIRENV_BASE      = $DIRENV_BASE"
	echo "DIRENV_HOME      = $DIRENV_HOME"

	exit
}

#------------------------------------------------------------------------------------------
do_help() {
	echo "$*"
	echo " "

	echo "$SELF:"

	echo $L_OPTS | tr ',' '\n' | while read _LINE
	do
		_OPT="${_LINE##:*}"
		_PAR="${_LINE%%*:}"

		if [[ ! -n $_PAR ]]; then
			_PAR="<parameter>"
		else
			_PAR=""
		fi

		printf "%10s %-20s %s\n" " " "$_OPT" "$_PAR"
	done

	exit
}

#------------------------------------------------------------------------------------------
do_version() {
	echo "$SELF: Version $_DEPLOY_VERSION"
	exit 0
}

#------------------------------------------------------------------------------------------
STEP=0
LOG() {
	local _LINE="$1"; shift
	local _MODE="${1:-RUN}"

	[[ $_MODE == INIT ]] && STEP=0

	(( STEP=$STEP + 1 ))

	printf "%3d: %s\n" "$STEP" "$_LINE"
}

#------------------------------------------------------------------------------------------
do_get_version() {
	local _VERSION="$1"

	if [[ "$_VERSION" == "LTS" ]]; then
		curl -s http://nodejs.org/dist/index.tab | grep -v '^version' | sed '1,$s/^v//' |  awk '$10 != "-" { print $1 }'|head -1
	else
		if [[ "$_VERSION" == "LATEST" ]]; then
			_FILTER="sed -n 2p"
		else
			_FILTER="sed -n 2,10p"
		fi
	
		curl -s http://nodejs.org/dist/index.tab | sed '1,$s/^v//' |  awk '{ print $1 }' | $_FILTER
	fi
}

#------------------------------------------------------------------------------------------
do_show_versions() {
		_FILTER="sed -n 2,10p"
		curl -s http://nodejs.org/dist/index.tab | sed '1,$s/^v//' |  awk '{ print $1 }' | $_FILTER
}

#------------------------------------------------------------------------------------------
do_self_update() {
	if [[ -d "$DIRENV_ROOT/.git" ]]; then
		cd "$DIRENV_ROOT"
		git pull
		exit
	fi
}

do_self_check_version() {
	local _TYPE="$1";	shift
	local _FILE1="$1";	shift
	local _FILE2="$1";	shift

	local _VERSION1="$(grep -E '^\s+_DEPLOY_VERSION'  $_FILE1 | cut -d= -f2)"
	local _VERSION2="$(grep -E '^\s+_DEPLOY_VERSION'  $_FILE2 | cut -d= -f2)"

	if [[ "$_VERSION1"  == "$_VERSION2" ]]; then
		RESULT=OK
	else
		RESULT="DIFF: $_VERSION1 != $_VERSION2"
	fi

	status "Check" " $_TYPE $RESULT"
	status "Check" " $_VERSION1 $_FILE1"
	status "Check" " $_VERSION2: $_FILE2"
}

do_self_check() {
	_FILE_CURRENT="$SCRIPT_CURRENT"
	do_self_check_version direnv_cli 		$_FILE_CURRENT $DIRENV_ROOT/bin/$SELF
	diff $_FILE_CURRENT $DIRENV_ROOT/bin/$SELF

	_FILE_CURRENT="$(direnv status|grep 'Loaded RC path' | cut -d' ' -f4-)"
	do_self_check_version .envrc 			$_FILE_CURRENT $DIRENV_TEMPLATES/master.envrc
	diff $_FILE_CURRENT $DIRENV_TEMPLATES/master.envrc

}

#------------------------------------------------------------------------------------------
do_install_check() {
	if [[ ! -n "$DIRENV_HOME" ]]; then
		printf "ERROR: direnv not setup correct. Missing DIRENV_BASE\n"
		exit
	fi
}

#------------------------------------------------------------------------------------------
do_install_defaults() {
	local _VERSION=$1; shift

	do_install_check

	local _FOLDER=$DIRENV_BASE/node/$_VERSION
	local _CONFIG=.env/.envrc.config

	PATH=$_FOLDER/bin:$PATH

	if [[ !  -f $_CONFIG ]]; then
		LOG "No defaults file: $_CONFIG"
		exit
	fi

	cat $_CONFIG | cut -d= -f2 | while read _LINE
	do
		LOG "npm -g install $_LINE"
		npm -g install $_LINE
	done
}

#------------------------------------------------------------------------------------------
do_install_python() {
	local _FOLDER=$DIRENV_HOME

	do_install_check

	LOG "Create venv in $_FOLDER/python"
	python3 -m venv $_FOLDER/python

	LOG "Activate venv"
	. $_FOLDER/python/bin/activate

	LOG "Upgrade pip"
	pip install --upgrade pip
}

#------------------------------------------------------------------------------------------
do_install_node() {
	local _VERSION=$1

	[[ "$OSTYPE" =~ "linux"  ]] && _OS=linux
	[[ "$OSTYPE" =~ "darwin" ]] && _OS=darwin

	local _LINK=http://nodejs.org/dist/${_VERSION}/node-${_VERSION}-${_OS}-x64.tar.gz

	echo $_LINK

	do_install_check

	local _FOLDER=$DIRENV_HOME/node/$_VERSION
	local _TARFILE=$(basename "$_LINK")
	local _TARFLDR=$DIRENV_ROOT/cache
	local _TARPATH=$_TARFLDR/$_TARFILE

	do_install_check

	if [[ -f "$_TARPATH" ]]; then
		LOG "Use cached NodeJS archiv for version $_VERSION"
	else
		LOG "Download NodeJS archiv for version $_VERSION"
		mkdir -p "$_TARFLDR"
		curl -fsSL "$_LINK" -o "$_TARPATH"
	fi

	LOG "Create $_FOLDER"
	rm -rf   "$_FOLDER"
	mkdir -p "$_FOLDER"

	LOG "Unpack NodeJS archiv"
	cat "$_TARPATH" | tar xz --strip 1 -C "$_FOLDER"

	LOG "Add PATH $_FOLDER/bin"
	PATH=$_FOLDER/bin:$PATH

	LOG "Update NPM: $_FOLDER/bin/npm"
	$_FOLDER/bin/npm --silent -g install npm

	if [[ $OPT_WITH_DEFAULTS = "YES" ]]; then
		LOG "Install defaults"
		do_install_defaults $_VERSION
	fi
}

#------------------------------------------------------------------------------------------
do_install_yarn() {
	local _VERSION=$1
	local _FOLDER=$DIRENV_HOME/yarn

	do_install_check

	LOG "Install yarn"
	npm --silent -g install yarn

	LOG "Set Yarn Global Folder to ${_FOLDER}"
	yarn --silent config set global-folder ${_FOLDER}

	LOG "Set Yarn Cache  Folder to ${YARN_ROOT}/cache-folder"
	yarn --silent config set cache-folder  ${YARN_ROOT}/cache-folder

	yarn config list
}

#------------------------------------------------------------------------------------------
do_install_angular_only() {
	local _VERSION=$1
	local _FOLDER=$DIRENV_HOME/yarn

	do_install_check

	LOG "Install Angular CLI with yarn"
	yarn --silent global add @angular/cli
	rm /usr/local/bin/ng

	PATH=$_FOLDER/node_modules/.bin:$PATH

	LOG "Using ng from $(which ng)"
	ng config -g cli.packageManager yarn
}

#------------------------------------------------------------------------------------------
do_install_ionic_only() {
	local _VERSION=$1
	local _FOLDER=$DIRENV_HOME/yarn

	do_install_check

	LOG "Install Ionic"
	#yarn --silent global add  ionic
	yarn global add ionic

	LOG "Setup link to binaries"

	mkdir -p  $DIRENV_HOME/bin

	if [[ -f /usr/local/bin/ionic ]]; then
		rm -f                                             "$DIRENV_HOME/bin/ionic"
		ln -s "$DIRENV_HOME/yarn/node_modules/.bin/ionic" "$DIRENV_HOME/bin/ionic"
	fi
}

do_install_ionic() {
	local _VERSION=$1

	do_install_check

	do_install_python			$_VERSION
	do_install_node				$_VERSION
	do_install_yarn				$_VERSION
	do_install_ionic_only		$VERSION

	do_install_defaults
}

do_install_angular() {
	local _VERSION=$1

	do_install_check

	do_install_python			$_VERSION
	do_install_node				$_VERSION
	do_install_yarn				$_VERSION
	do_install_angular_only 	$_VERSION

	do_install_defaults
}

#------------------------------------------------------------------------------------------
do_init() {
	local _TYPE="$1"

	local _EXT
	if [[ -n "$_TYPE"  ]]; then
		_EXT="${_TYPE}"
	else
		_EXT="master"
	fi

	mkdir -p .env

	LOG "Create ${_EXT}.envrc"
	cp $DIRENV_TEMPLATES/${_EXT}.envrc  .envrc

	LOG "Create ${_EXT}.config"
	cp $DIRENV_TEMPLATES/${_EXT}.config .env/.envrc.config

	if [[ ! -f ".env/.envrc.ssh-user" ]]; then
		LOG "Create ${_EXT}.ssh-user"
		echo "r14r" >.env/.envrc.ssh-user
	fi
}

#------------------------------------------------------------------------------------------
ssh_agent_start() {
	_START=${#SSH_ENV}
	_REL_PATH="${DIRENV_HOME:$_START}"

	status  "SSH" "Start"     ""				"$_REL_PATH"
	/usr/bin/ssh-agent | sed 's/^echo/#echo/' >"${SSH_ENV}"

	chmod 600 "${SSH_ENV}"
	. "${SSH_ENV}" >/dev/null
}

#------------------------------------------------------------------------------------------
ssh_agent_status() {
	_START=${#SSH_ENV}
	_REL_PATH="${DIRENV_HOME:$_START}"

	if [[ ! -f "${SSH_ENV}" ]]; then
		status  "SSH" "NO SSH Environment"	""					"$_REL_PATH"
	else
		status  "SSH" "SSH Environment"	"$SSH_AGENT_PID"		"$_REL_PATH"
		. "${SSH_ENV}" > /dev/null

		cat "${SSH_ENV}"
		ps -ef | grep $SSH_AGENT_PID
	fi
}

#------------------------------------------------------------------------------------------
ssh_agent_stop() {
	_START=${#SSH_ENV}
	_REL_PATH="${DIRENV_HOME:$_START}"

	if [[ ! -f "${SSH_ENV}" ]]; then
		status  "SSH" "NO SSH Environment"	""					"$_REL_PATH"
	else
		. "${SSH_ENV}" > /dev/null

		ps $SSH_AGENT_PID 1>&- 2>&-
		_RC=$?


		if [[ "$_RC" = 0 ]]; then
			status  "SSH" "Stop"		"$SSH_AGENT_PID"	"$_REL_PATH"
			kill -9 $SSH_AGENT_PID

			rm -f "${SSH_ENV}"
		else
			status  "SSH" "SSH Agent"		"NO running agent"	"$_REL_PATH"
		fi
	fi

}

#------------------------------------------------------------------------------------------
	VERBOSE=false
	debug=false

	OPT_YSN_VERSION=NO
	OPT_YSN_INFO=NO
	OPT_YSN_HELP=NO

	OPT_VERSION_USE_LATEST=NO

	OPT_VERSION=MISSING
	OPT_WITH_DEFAULTS=NO

#------------------------------------------------------------------------------------------
	CMD_GETOPT=/usr/local/opt/gnu-getopt/bin/getopt
	CMD_GETOPT=getopt

	S_OPTS="vdm:"
	L_OPTS="verbose,debug,help,version, info"
	L_OPTS="$L_OPTS,list,update,check"
	L_OPTS="$L_OPTS,init:"
	L_OPTS="$L_OPTS,install:,install-version:,install-defaults,with-defaults"
	L_OPTS="$L_OPTS,ssh-start,ssh-stop,ssh-status"

	OPTS=$($CMD_GETOPT --options "$S_OPTS"--longoptions "$L_OPTS"	-- "$@")

	eval set $OPTS
	shift

	while [[ $# -gt 0 ]]; do
		case "$1" in
			-v | --verbose)		VERBOSE=true;										;;
			-d | --debug)		DEBUGLEVEL="$2";					shift			;;

			--help)				OPT_YSN_HELP=YES									;;
			--version)			OPT_YSN_VERSION=YES									;;
			--info)				OPT_YSN_INFO=YES									;;

			--update)			OPT_MODE=update										;;
			--check)			OPT_MODE=check										;;

			--list)				OPT_MODE=list										;;
			--init)				OPT_MODE=init;		OPT_TYPE="$2";		shift		;;
			--install)			OPT_MODE=install;	OPT_TYPE="$2";		shift		;;
	
			--install-version)						OPT_VERSION="$2";	shift		;;
			--with-defaults)	OPT_WITH_DEFAULTS=YES								;;
	
			--install-defaults)	OPT_MODE=install_defaults							;;

			--ssh-start)		OPT_MODE=ssh-start									;;
			--ssh-stop)			OPT_MODE=ssh-stop									;;
			--ssh-status)		OPT_MODE=ssh-status									;;

			--)														shift; break	;;
			* )														       break	;;
		esac
	
		shift
	done

#------------------------------------------------------------------------------------------
	[[ "$OPT_VERSION" = "" ]] && OPT_VERSION=MISSING
	OPT_VERSION=${OPT_VERSION^^}

#------------------------------------------------------------------------------------------
	if [[ $OPT_MODE == install ]]; then
		OPT_MODE=$OPT_MODE/$OPT_TYPE
	fi

	[[ $OPT_YSN_HELP    == YES ]] && do_help
	[[ $OPT_YSN_VERSION == YES ]] && do_version
	[[ $OPT_YSN_INFO    == YES ]] && do_info


	if [[ $OPT_TYPE == node ]]; then
		if   [[ "$OPT_VERSION" == "MISSING" && "$OPT_YSN_VERSION" == YES ]]; then
			do_help "Missing Version. Use Parameter --install-version instead of --version"
		fi
	fi

	if   [[ "$OPT_VERSION" == "MISSING" ]]; then OPT_VERSION=v$(do_get_version LTS)
	elif [[ "$OPT_VERSION" == "LATEST"  ]]; then OPT_VERSION=v$(do_get_version LATEST)
	elif [[ "$OPT_VERSION" == "LTS"     ]]; then OPT_VERSION=v$(do_get_version LTS)
	elif [[ "$OPT_VERSION{0:1}" != "v"  ]]; then OPT_VERSION=v$OPT_VERSION
	fi

	#echo "VERSION         = $_DEPLOY_VERSION"
	#echo "OPT_YSN_HELP    = $OPT_YSN_HELP"
	#echo "OPT_YSN_VERSION = $OPT_YSN_VERSION"
	#echo "OPT_MODE        = $OPT_MODE"
	#echo "OPT_TYPE        = $OPT_TYPE"
	#echo "OPT_VERSION     = $OPT_VERSION"

	case $OPT_MODE in
		init)					do_init			$OPT_TYPE				;;
		update)					do_self_update							;;
		check)					do_self_check							;;

		version)				do_version								;;
		help)					do_help									;;

		install/node)			do_install_node			$OPT_VERSION	;;
		install/nodejs)			do_install_node			$OPT_VERSION	;;
		install/yarn)			do_install_yarn			$OPT_VERSION	;;

		install/angular)		do_install_angular		$OPT_VERSION	;;
		install/angular_only)	do_install_angular_only	$OPT_VERSION	;;

		install/ionic)			do_install_ionic		$OPT_VERSION	;;
		install/ionic_only)		do_install_ionic_only	$OPT_VERSION	;;

		install/python)			do_install_python						;;
		install_defaults)		do_install_defaults						;;

		list)					do_get_version							;;

		ssh-start)				ssh_agent_start							;;
		ssh-stop)				ssh_agent_stop							;;
		ssh-status)				ssh_agent_status						;;

	esac

